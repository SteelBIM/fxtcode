//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FXT.DataCenter.WebUI.ExcelUploadServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExcelUploadServices.IExcelUpload")]
    public interface IExcelUpload {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IExcelUpload/Start")]
        void Start(int cityid, int fxtcompanyid, string filePath, string userid, string taskName, string type);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IExcelUpload/Start")]
        System.IAsyncResult BeginStart(int cityid, int fxtcompanyid, string filePath, string userid, string taskName, string type, System.AsyncCallback callback, object asyncState);
        
        void EndStart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExcelUpload/HouseConvert", ReplyAction="http://tempuri.org/IExcelUpload/HouseConvertResponse")]
        void HouseConvert(string filePath, string newPath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IExcelUpload/HouseConvert", ReplyAction="http://tempuri.org/IExcelUpload/HouseConvertResponse")]
        System.IAsyncResult BeginHouseConvert(string filePath, string newPath, System.AsyncCallback callback, object asyncState);
        
        void EndHouseConvert(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExcelUploadChannel : FXT.DataCenter.WebUI.ExcelUploadServices.IExcelUpload, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExcelUploadClient : System.ServiceModel.ClientBase<FXT.DataCenter.WebUI.ExcelUploadServices.IExcelUpload>, FXT.DataCenter.WebUI.ExcelUploadServices.IExcelUpload {
        
        private BeginOperationDelegate onBeginStartDelegate;
        
        private EndOperationDelegate onEndStartDelegate;
        
        private System.Threading.SendOrPostCallback onStartCompletedDelegate;
        
        private BeginOperationDelegate onBeginHouseConvertDelegate;
        
        private EndOperationDelegate onEndHouseConvertDelegate;
        
        private System.Threading.SendOrPostCallback onHouseConvertCompletedDelegate;
        
        public ExcelUploadClient() {
        }
        
        public ExcelUploadClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExcelUploadClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExcelUploadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExcelUploadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> HouseConvertCompleted;
        
        public void Start(int cityid, int fxtcompanyid, string filePath, string userid, string taskName, string type) {
            base.Channel.Start(cityid, fxtcompanyid, filePath, userid, taskName, type);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginStart(int cityid, int fxtcompanyid, string filePath, string userid, string taskName, string type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStart(cityid, fxtcompanyid, filePath, userid, taskName, type, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndStart(System.IAsyncResult result) {
            base.Channel.EndStart(result);
        }
        
        private System.IAsyncResult OnBeginStart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int cityid = ((int)(inValues[0]));
            int fxtcompanyid = ((int)(inValues[1]));
            string filePath = ((string)(inValues[2]));
            string userid = ((string)(inValues[3]));
            string taskName = ((string)(inValues[4]));
            string type = ((string)(inValues[5]));
            return this.BeginStart(cityid, fxtcompanyid, filePath, userid, taskName, type, callback, asyncState);
        }
        
        private object[] OnEndStart(System.IAsyncResult result) {
            this.EndStart(result);
            return null;
        }
        
        private void OnStartCompleted(object state) {
            if ((this.StartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartAsync(int cityid, int fxtcompanyid, string filePath, string userid, string taskName, string type) {
            this.StartAsync(cityid, fxtcompanyid, filePath, userid, taskName, type, null);
        }
        
        public void StartAsync(int cityid, int fxtcompanyid, string filePath, string userid, string taskName, string type, object userState) {
            if ((this.onBeginStartDelegate == null)) {
                this.onBeginStartDelegate = new BeginOperationDelegate(this.OnBeginStart);
            }
            if ((this.onEndStartDelegate == null)) {
                this.onEndStartDelegate = new EndOperationDelegate(this.OnEndStart);
            }
            if ((this.onStartCompletedDelegate == null)) {
                this.onStartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartCompleted);
            }
            base.InvokeAsync(this.onBeginStartDelegate, new object[] {
                        cityid,
                        fxtcompanyid,
                        filePath,
                        userid,
                        taskName,
                        type}, this.onEndStartDelegate, this.onStartCompletedDelegate, userState);
        }
        
        public void HouseConvert(string filePath, string newPath) {
            base.Channel.HouseConvert(filePath, newPath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginHouseConvert(string filePath, string newPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHouseConvert(filePath, newPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndHouseConvert(System.IAsyncResult result) {
            base.Channel.EndHouseConvert(result);
        }
        
        private System.IAsyncResult OnBeginHouseConvert(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string filePath = ((string)(inValues[0]));
            string newPath = ((string)(inValues[1]));
            return this.BeginHouseConvert(filePath, newPath, callback, asyncState);
        }
        
        private object[] OnEndHouseConvert(System.IAsyncResult result) {
            this.EndHouseConvert(result);
            return null;
        }
        
        private void OnHouseConvertCompleted(object state) {
            if ((this.HouseConvertCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HouseConvertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HouseConvertAsync(string filePath, string newPath) {
            this.HouseConvertAsync(filePath, newPath, null);
        }
        
        public void HouseConvertAsync(string filePath, string newPath, object userState) {
            if ((this.onBeginHouseConvertDelegate == null)) {
                this.onBeginHouseConvertDelegate = new BeginOperationDelegate(this.OnBeginHouseConvert);
            }
            if ((this.onEndHouseConvertDelegate == null)) {
                this.onEndHouseConvertDelegate = new EndOperationDelegate(this.OnEndHouseConvert);
            }
            if ((this.onHouseConvertCompletedDelegate == null)) {
                this.onHouseConvertCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHouseConvertCompleted);
            }
            base.InvokeAsync(this.onBeginHouseConvertDelegate, new object[] {
                        filePath,
                        newPath}, this.onEndHouseConvertDelegate, this.onHouseConvertCompletedDelegate, userState);
        }
    }
}
