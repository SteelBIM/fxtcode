//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FXT.DataCenter.WebUI.BatchAddPicture {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BatchAddPicture.IBatchAddPicture")]
    public interface IBatchAddPicture {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBatchAddPicture/ProjectPictures")]
        void ProjectPictures(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IBatchAddPicture/ProjectPictures")]
        System.IAsyncResult BeginProjectPictures(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName, System.AsyncCallback callback, object asyncState);
        
        void EndProjectPictures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBatchAddPicture/BuildingPictures")]
        void BuildingPictures(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IBatchAddPicture/BuildingPictures")]
        System.IAsyncResult BeginBuildingPictures(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName, System.AsyncCallback callback, object asyncState);
        
        void EndBuildingPictures(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBatchAddPictureChannel : FXT.DataCenter.WebUI.BatchAddPicture.IBatchAddPicture, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BatchAddPictureClient : System.ServiceModel.ClientBase<FXT.DataCenter.WebUI.BatchAddPicture.IBatchAddPicture>, FXT.DataCenter.WebUI.BatchAddPicture.IBatchAddPicture {
        
        private BeginOperationDelegate onBeginProjectPicturesDelegate;
        
        private EndOperationDelegate onEndProjectPicturesDelegate;
        
        private System.Threading.SendOrPostCallback onProjectPicturesCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuildingPicturesDelegate;
        
        private EndOperationDelegate onEndBuildingPicturesDelegate;
        
        private System.Threading.SendOrPostCallback onBuildingPicturesCompletedDelegate;
        
        public BatchAddPictureClient() {
        }
        
        public BatchAddPictureClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BatchAddPictureClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BatchAddPictureClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BatchAddPictureClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ProjectPicturesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> BuildingPicturesCompleted;
        
        public void ProjectPictures(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName) {
            base.Channel.ProjectPictures(zipFilePath, unZipFilePath, userId, cityId, fxtCompanyId, taskName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProjectPictures(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProjectPictures(zipFilePath, unZipFilePath, userId, cityId, fxtCompanyId, taskName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndProjectPictures(System.IAsyncResult result) {
            base.Channel.EndProjectPictures(result);
        }
        
        private System.IAsyncResult OnBeginProjectPictures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string zipFilePath = ((string)(inValues[0]));
            string unZipFilePath = ((string)(inValues[1]));
            string userId = ((string)(inValues[2]));
            int cityId = ((int)(inValues[3]));
            int fxtCompanyId = ((int)(inValues[4]));
            string taskName = ((string)(inValues[5]));
            return this.BeginProjectPictures(zipFilePath, unZipFilePath, userId, cityId, fxtCompanyId, taskName, callback, asyncState);
        }
        
        private object[] OnEndProjectPictures(System.IAsyncResult result) {
            this.EndProjectPictures(result);
            return null;
        }
        
        private void OnProjectPicturesCompleted(object state) {
            if ((this.ProjectPicturesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProjectPicturesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProjectPicturesAsync(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName) {
            this.ProjectPicturesAsync(zipFilePath, unZipFilePath, userId, cityId, fxtCompanyId, taskName, null);
        }
        
        public void ProjectPicturesAsync(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName, object userState) {
            if ((this.onBeginProjectPicturesDelegate == null)) {
                this.onBeginProjectPicturesDelegate = new BeginOperationDelegate(this.OnBeginProjectPictures);
            }
            if ((this.onEndProjectPicturesDelegate == null)) {
                this.onEndProjectPicturesDelegate = new EndOperationDelegate(this.OnEndProjectPictures);
            }
            if ((this.onProjectPicturesCompletedDelegate == null)) {
                this.onProjectPicturesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProjectPicturesCompleted);
            }
            base.InvokeAsync(this.onBeginProjectPicturesDelegate, new object[] {
                        zipFilePath,
                        unZipFilePath,
                        userId,
                        cityId,
                        fxtCompanyId,
                        taskName}, this.onEndProjectPicturesDelegate, this.onProjectPicturesCompletedDelegate, userState);
        }
        
        public void BuildingPictures(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName) {
            base.Channel.BuildingPictures(zipFilePath, unZipFilePath, userId, cityId, fxtCompanyId, taskName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBuildingPictures(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuildingPictures(zipFilePath, unZipFilePath, userId, cityId, fxtCompanyId, taskName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndBuildingPictures(System.IAsyncResult result) {
            base.Channel.EndBuildingPictures(result);
        }
        
        private System.IAsyncResult OnBeginBuildingPictures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string zipFilePath = ((string)(inValues[0]));
            string unZipFilePath = ((string)(inValues[1]));
            string userId = ((string)(inValues[2]));
            int cityId = ((int)(inValues[3]));
            int fxtCompanyId = ((int)(inValues[4]));
            string taskName = ((string)(inValues[5]));
            return this.BeginBuildingPictures(zipFilePath, unZipFilePath, userId, cityId, fxtCompanyId, taskName, callback, asyncState);
        }
        
        private object[] OnEndBuildingPictures(System.IAsyncResult result) {
            this.EndBuildingPictures(result);
            return null;
        }
        
        private void OnBuildingPicturesCompleted(object state) {
            if ((this.BuildingPicturesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BuildingPicturesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BuildingPicturesAsync(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName) {
            this.BuildingPicturesAsync(zipFilePath, unZipFilePath, userId, cityId, fxtCompanyId, taskName, null);
        }
        
        public void BuildingPicturesAsync(string zipFilePath, string unZipFilePath, string userId, int cityId, int fxtCompanyId, string taskName, object userState) {
            if ((this.onBeginBuildingPicturesDelegate == null)) {
                this.onBeginBuildingPicturesDelegate = new BeginOperationDelegate(this.OnBeginBuildingPictures);
            }
            if ((this.onEndBuildingPicturesDelegate == null)) {
                this.onEndBuildingPicturesDelegate = new EndOperationDelegate(this.OnEndBuildingPictures);
            }
            if ((this.onBuildingPicturesCompletedDelegate == null)) {
                this.onBuildingPicturesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuildingPicturesCompleted);
            }
            base.InvokeAsync(this.onBeginBuildingPicturesDelegate, new object[] {
                        zipFilePath,
                        unZipFilePath,
                        userId,
                        cityId,
                        fxtCompanyId,
                        taskName}, this.onEndBuildingPicturesDelegate, this.onBuildingPicturesCompletedDelegate, userState);
        }
    }
}
