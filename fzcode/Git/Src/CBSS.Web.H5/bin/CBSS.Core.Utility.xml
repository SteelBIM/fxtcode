<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CBSS.Core.Utility</name>
    </assembly>
    <members>
        <member name="T:CBSS.Core.Utility.AjaxResult">
            <summary>
            表示Ajax操作结果 
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.AjaxResult.type">
            <summary>
            获取 Ajax操作结果类型
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.AjaxResult.errorcode">
            <summary>
            获取 Ajax操作结果编码
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.AjaxResult.message">
            <summary>
            获取 消息内容
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.AjaxResult.resultdata">
            <summary>
            获取 返回数据
            </summary>
        </member>
        <member name="T:CBSS.Core.Utility.ResultType">
            <summary>
            表示 ajax 操作结果类型的枚举
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.ResultType.info">
            <summary>
            消息结果类型
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.ResultType.success">
            <summary>
            成功结果类型
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.ResultType.warning">
            <summary>
            警告结果类型
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.ResultType.error">
            <summary>
            异常结果类型
            </summary>
        </member>
        <member name="T:CBSS.Core.Utility.Pagination">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.Pagination.rows">
            <summary>
            每页行数
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.Pagination.page">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.Pagination.sidx">
            <summary>
            排序列
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.Pagination.sord">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.Pagination.records">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.Pagination.total">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.Pagination.conditionJson">
            <summary>
            查询条件Json
            </summary>
        </member>
        <member name="T:CBSS.Core.Utility.AppSettingsHelper">
            <summary>
            配置文件appSettings节点的帮助方法
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.GetString(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的字符串类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>字符串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.GetString(System.String,System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的字符串类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.GetStringArray(System.String,System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的string[]类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="separator">分隔符</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.GetStringArray(System.String,System.String,System.String[])">
            <summary>
            获取配置文件中appSettings节点下指定索引键的string[]类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="separator">分隔符</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.getStringArray(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            获取配置文件中appSettings节点下指定索引键的string[]类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="separator">分隔符</param>
            <param name="valueRequired">指定配置文件中是否必须需要配置有该名称的元素，传入False则方法返回默认值，反之抛出异常</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.GetInt32(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的Int类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>Int</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.GetInt32(System.String,System.Int32)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的Int类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>Int</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.getInt32(System.String,System.Nullable{System.Int32})">
            <summary>
            获取配置文件中appSettings节点下指定索引键的Int类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>Int</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.GetBoolean(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的布尔类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.GetBoolean(System.String,System.Boolean)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的布尔类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.getBoolean(System.String,System.Nullable{System.Boolean})">
            <summary>
            获取配置文件中appSettings节点下指定索引键的布尔类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.GetTimeSpan(System.String)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的时间间隔类型的的值
            </summary>
            <param name="key">索引键</param>
            <returns>时间间隔</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.GetTimeSpan(System.String,System.TimeSpan)">
            <summary>
            获取配置文件中appSettings节点下指定索引键的时间间隔类型的的值
            </summary>
            <param name="key">索引键</param>
            <param name="defaultValue">默认值</param>
            <returns>时间间隔</returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.getValue``1(System.String,System.Func{System.String,``0,System.Boolean},System.Nullable{``0})">
            <summary>
            获取配置文件appSettings集合中指定索引的值
            </summary>
            <typeparam name="T">返回值类型参数</typeparam>
            <param name="key">索引键</param>
            <param name="parseValue">将指定索引键的值转化为返回类型的值的委托方法</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.AppSettingsHelper.getValue(System.String,System.Boolean,System.String)">
            <summary>
            获取配置文件appSettings集合中指定索引的值
            </summary>
            <param name="key">索引</param>
            <param name="valueRequired">指定配置文件中是否必须需要配置有该名称的元素，传入False则方法返回默认值，反之抛出异常</param>
            <param name="defaultValue">默认值</param>
            <returns>字符串</returns>
        </member>
        <member name="T:CBSS.Core.Utility.AssemblyHelper">
            <summary>
            程序集反射辅助类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.AssemblyHelper.GetEntryAssembly">
            <summary>
            得到入口程序集，兼容Web和Winform
            </summary>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.AssemblyHelper.FindTypeByInheritType(System.Type,System.String)">
            <summary>
            扫描程序集找到继承了某基类的所有子类
            </summary>
            <param name="inheritType">基类</param>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.AssemblyHelper.FindAllPropertyByAttribute``1(System.String)">
            <summary>
            扫描程序集找到带有某个Attribute的所有PropertyInfo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.AssemblyHelper.FindAllTypeByAttribute``1(System.String)">
            <summary>
            扫描程序集找到类型上带有某个Attribute的所有类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.AssemblyHelper.FindTypeByInterface``1(System.String)">
            <summary>
            扫描程序集找到实现了某个接口的第一个实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchpattern">文件名过滤</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.AssemblyHelper.GetBaseDirectory">
            <summary>
            得到当前应用程序的根目录
            </summary>
            <returns></returns>
        </member>
        <member name="T:CBSS.Core.Utility.CommonHelper">
            <summary>
            常用公共类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.CommonHelper.TimerStart">
            <summary>
            计时器开始
            </summary>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.CommonHelper.TimerEnd(System.Diagnostics.Stopwatch)">
            <summary>
            计时器结束
            </summary>
            <param name="watch"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.CommonHelper.RemoveDup(System.String[])">
            <summary>
            删除数组中的重复项
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.CommonHelper.CreateNo">
            <summary>
            自动生成编号  201008251145409865
            </summary>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.CommonHelper.RndNum(System.Int32)">
            <summary>
            生成0-9随机数
            </summary>
            <param name="codeNum">生成长度</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.CommonHelper.DelLastComma(System.String)">
            <summary>
            删除最后结尾的一个逗号
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.CommonHelper.DelLastChar(System.String,System.String)">
            <summary>
            删除最后结尾的指定字符后的字符
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.CommonHelper.DelLastLength(System.String,System.Int32)">
            <summary>
            删除最后结尾的长度
            </summary>
            <param name="str"></param>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.OSSHelper.GetPostObjectSignature(System.String,System.String,System.String,System.String)">
            <summary>
            获取验证签名
            </summary>
            <param name="accessKeyId"></param>
            <param name="accessKeySecret"></param>
            <param name="host">OSS地址(http://fzyouke.oss-cn-shenzhen.aliyuncs.com)</param>
            <param name="bucketName">存储空间名称</param>
            <returns></returns>
        </member>
        <member name="P:CBSS.Core.Utility.PageParameter`1.OrderColumns">
            <summary>
            排序列名称,支持多列排序,例如ORDER BY column1,column2但是语句中不能还有ORDER BY关键字
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.PageParameter`1._isorderbyasc">
            <summary>
            排序方式1:ASC,0:DESC 
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.PageParameter`1.IsOrderByASC">
            <summary>
            排序方式1:ASC,0:DESC 
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.PageParameter`1._isorderbyasc2">
            <summary>
            排序方式1:ASC,0:DESC 
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.PageParameter`1.IsOrderByASC2">
            <summary>
            排序方式1:ASC,0:DESC 
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.PageParameter`1.PageIndex">
            <summary>
            当前分页页面数,如果程序是第一次使用则该值为1
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.PageParameter`1.PageSize">
            <summary>
            程序需求每页显示的数据条数
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.PageParameter`1.Field">
            <summary>
            使用in查询的字段(没有条件不赋值)
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.PageParameter`1.In">
            <summary>
            使用in查询的条件(没有条件不赋值)
            </summary>
        </member>
        <member name="T:CBSS.Core.Utility.RSAHelper">
            <summary>
            接口加密解密
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.RSAHelper.sign(System.String,System.String,System.String)">
            <summary>  
            签名  
            </summary>  
            <param name="content">待签名字符串</param>  
            <param name="privateKey">私钥</param>  
            <param name="input_charset">编码格式</param>  
            <returns>签名后字符串</returns>  
        </member>
        <member name="M:CBSS.Core.Utility.RSAHelper.verify(System.String,System.String,System.String,System.String)">
            <summary>  
            验签  
            </summary>  
            <param name="content">待验签字符串</param>  
            <param name="signedString">签名</param>  
            <param name="publicKey">公钥</param>  
            <param name="input_charset">编码格式</param>  
            <returns>true(通过)，false(不通过)</returns>  
        </member>
        <member name="M:CBSS.Core.Utility.RSAHelper.encryptData(System.String,System.String,System.String)">
            <summary>  
            加密  
            </summary>  
            <param name="resData">需要加密的字符串</param>  
            <param name="publicKey">公钥</param>  
            <param name="input_charset">编码格式</param>  
            <returns>明文</returns>  
        </member>
        <member name="M:CBSS.Core.Utility.RSAHelper.decryptData(System.String,System.String,System.String)">
            <summary>  
            解密  
            </summary>  
            <param name="resData">加密字符串</param>  
            <param name="privateKey">私钥</param>  
            <param name="input_charset">编码格式</param>  
            <returns>明文</returns>  
        </member>
        <member name="T:CBSS.Core.Utility.CurrencyHelper">
            <summary>
            货币辅助类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.CurrencyHelper.ToChineseNumeral(System.Decimal)">
            <summary> 
            转换人民币大小金额 
            </summary> 
            <param name="num">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:CBSS.Core.Utility.CurrencyHelper.ToChineseNumeral(System.String)">
            <summary> 
            转换人民币大小金额
            </summary> 
            <param name="num">金额</param> 
            <returns>大写形式</returns> 
        </member>
        <member name="T:CBSS.Core.Utility.ExcelHelper">
            <summary>
            Excel相关操作类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.GetDataTable(System.String)">
            <summary>
            根据Excel文件名(包含所在的路径)获得DataTable
            2003
            </summary>
            <param name="strExcelFilePath">Excel文件名(包含所在的路径)</param>
            <returns>返回的DataTable</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.GetDataTable(System.String,System.Int32)">
            <summary>
            根据Excel文件名(包含所在的路径)获得DataTable
            </summary>
            <param name="strExcelFilePath">Excel文件名(包含所在的路径)</param>
            2003
            <param name="TableIndex"></param>
            <returns>返回的DataTable</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.GetTableName(System.String,System.Int32)">
            <summary>
            取得Sheet名称
            2003
            </summary>
            <param name="strExcelFilePath">Excel文件名(包含所在的路径)</param>
            <param name="TableIndex">页签索引</param>
            <returns>Sheet名称</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.ExExcel``1(System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> 
            将一组对象导出成EXCEL 
            </summary> 
            <typeparam name="T">要导出对象的类型</typeparam> 
            <param name="objList">一组对象</param> 
            <param name="FileName">导出后的文件名</param> 
            <param name="columnInfo">列名信息</param> 
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.GetExcelTables(System.String)">
            <summary>
            获取Excel文件数据表列表
            2003  2007以上
            </summary>z
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.ExportExcelToDt(System.String,System.String)">
            <summary>
            将Excel文件导出至DataTable(第一行作为表头)
            2003  2007以上
            </summary>
            <param name="ExcelFilePath">Excel文件路径</param>
            <param name="TableName">数据表名，如果数据表名错误，默认为第一个数据表名</param>
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.GetExcelTableColumns(System.String,System.String)">
            <summary>
            获取Excel文件指定数据表的数据列表
            2003
            </summary>
            <param name="ExcelFileName">Excel文件名</param>
            <param name="TableName">数据表名</param>
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.ImportExcelByNPOI(System.String,System.Data.DataTable,System.String)">
            <summary>
            使用npoi导入excel
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="dt"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.GetNewFileName(System.String,System.String,System.Web.HttpPostedFileBase)">
            <summary>
            获取完整路径加文件名
            </summary>
            <param name="strName">文件名称（带后缀）</param>
            <param name="filePath">文件绝对路径</param>
            <param name="ofile"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.StringRep(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ExcelHelper.ExcelToDataTableByNPOI(System.String,System.String,System.Boolean)">
            <summary>
            将excel中的数据导入到DataTable中
            </summary>
            <param name="sheetName">excel工作薄sheet的名称</param>
            <param name="fileName"></param>
            <param name="isFirstRowColumn">第一行是否是DataTable的列名</param>
            <returns>返回的DataTable</returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringEnumHelper.GetStringValue``1(``0)">
            <summary>
            Will get the string value for a given enums value, this will
            only work if you assign the StringValue attribute to
            the items in your enum.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringEnumHelper.ToDictionaryKeyValue``1(System.Int32)">
            <summary>
            获取枚举的名称对应值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringEnumHelper.ToDictionaryKeyValue``1">
            <summary>
            获取枚举的名称对应值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringEnumHelper.ToDictionaryKeyDict``1">
            <summary>
            获取对应名称的字典(值,描述)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringEnumHelper.ToDictionaryKeyString``1">
            <summary>
            获取枚举名称和描述
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringEnumHelper.ToDictionaryNameValue``1">
            <summary>
            获取枚举名称和描述
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringEnumHelper.ToDictionaryValueName``1">
            <summary>
            获取值和描述
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringEnumHelper.GetIntValue``1(System.String)">
            <summary>
            获取对应名称的值
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:CBSS.Core.Utility.StringHelper">
            <summary>
            字符串相关操作类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.GetCut(System.String,System.Int32)">
            <summary>
            截取字符串
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="length">最大长度</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.GetCut(System.String,System.Int32,System.String)">
            <summary>
            截取字符串
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="length">最大长度</param>
            <param name="replaceStr">替换被截取掉的字符串</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.Contains(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            检查某集合中是否包含某字符串(区分大小写)
            </summary>
            <param name="findString">要查询的字符串</param>
            <param name="allStr">被检查的集合</param>
            <returns>bool</returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.GetLoginCodeMd5(System.String)">
            <summary>
            获得登录Api中的Code,即对时间加密
            </summary>
            <param name="pwd">密码</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.GetMd5(System.String)">
            <summary>
            进行MD5效验
            </summary>
            <param name="strmd5"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.GetMd5(System.String,System.String)">
            <summary>
            进行MD5效验
            </summary>
            <param name="strmd5"></param>
            <param name="key">加密key</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.GetPassWordMd5(System.String)">
            <summary>
            获得加密后的密码
            </summary>
            <param name="pwd">密码</param>
            <returns></returns>
        </member>
        <member name="F:CBSS.Core.Utility.StringHelper.WcfLoginMd5Key">
            <summary>
            WCF登录接口加密的Key
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.StringHelper.WcfPassWordMd5Key">
            <summary>
            用户密码加密的Key
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.GetPYString(System.String)">
            <summary>
            得到中文的简拼音
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.ConvertPinYin(System.String,System.Int32)">
             <summary>
            输入中文得到全拼音
             </summary>
             <param name="chrstr"></param>
             <param name="len"></param>
             <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.GenerateCheckCodeNum(System.Int32)">
            <summary>
            生成随机数字字符串
            </summary>
            <param name="codeCount">待生成的位数</param>
            <returns>生成的数字字符串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.GenerateCheckCode(System.Int32)">
            <summary>
            生成随机字母字符串(数字字母混和)
            </summary>
            <param name="codeCount">待生成的位数</param>
            <returns>生成的字母字符串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.StrToInt32(System.String,System.Int32)">
            <summary>
            把字符串转换为Int
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="defaultValue">转换失败时的默认值</param>
            <returns>转换后的结果</returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.StrToInt32(System.String)">
            <summary>
            把字符串转换为Int
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.StrToDecimal(System.String,System.Int32)">
            <summary>
            把字符串转换为decimal
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.StrToDecimal(System.String)">
            <summary>
            把字符串转换为decimal
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.StrToDateTime(System.String,System.String)">
            <summary>
            把字符串转换为DateTime
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.StrToDateTime(System.String)">
            <summary>
            把字符串转换为DateTime
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringHelper.IsDateTime(System.String)">
            <summary>
            把字符串转换为DateTime
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:CBSS.Core.Utility.StringValueAttribute.StringValue">
            <summary>
            Holds the stringvalue for a value in an enum.
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.StringValueAttribute.#ctor(System.String)">
            <summary>
            Constructor used to init a StringValue Attribute
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:CBSS.Core.Utility.SecurityHelper">
            <summary>
            信息安全类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.sign(System.String,System.String,System.String)">
            <summary>  
            签名  
            </summary>  
            <param name="content">待签名字符串</param>  
            <param name="privateKey">私钥</param>  
            <param name="input_charset">编码格式</param>  
            <returns>签名后字符串</returns>  
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.verify(System.String,System.String,System.String,System.String)">
            <summary>  
            验签  
            </summary>  
            <param name="content">待验签字符串</param>  
            <param name="signedString">签名</param>  
            <param name="publicKey">公钥</param>  
            <param name="input_charset">编码格式</param>  
            <returns>true(通过)，false(不通过)</returns>  
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.encryptData(System.String,System.String,System.String)">
            <summary>  
            加密  
            </summary>  
            <param name="resData">需要加密的字符串</param>  
            <param name="publicKey">公钥</param>  
            <param name="input_charset">编码格式</param>  
            <returns>明文</returns>  
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.decryptData(System.String,System.String,System.String)">
            <summary>  
            解密  
            </summary>  
            <param name="resData">加密字符串</param>  
            <param name="privateKey">私钥</param>  
            <param name="input_charset">编码格式</param>  
            <returns>明文</returns>  
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.MD5(System.String)">
            <summary>
            MD5 hash加密
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.Encode(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串,失败返回源串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.Decode(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.EncryptDES(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.DecryptDES(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.GeneratePassword(System.Int32)">
            <summary>
            生成随机明文密码
            </summary>
            <param name="length">要生成的密码长度</param>
            <returns>明文密码</returns>
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.GenerateSalt">
            <summary>
            生成密码16位种子
            </summary>
            <returns>随机16位密码种子</returns>
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.HashPassword(System.String,System.String)">
            <summary>
            用SHA256算法对明文密码加密
            注：此方式加密后的密码不可还原
            </summary>
            <param name="Password">用户输入的密码</param>
            <param name="Salt">数据库里的密码种子</param>
            <returns>HASH后的密码</returns>
        </member>
        <member name="M:CBSS.Core.Utility.SecurityHelper.ValidatePassword(System.String,System.String)">
            <summary>
            校验密码
            </summary>
            <param name="DBencryptedPassword">数据库储存的加密密码</param>
            <param name="PasswordToValidate">用户输入的密码</param>
            <param name="salt">数据库里的密码种子</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:CBSS.Core.Utility.Caching">
            <summary>
            本地缓存帮助类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.Caching.Get(System.String)">
            <summary>
            本地缓存获取
            </summary>
            <param name="name">key</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.Caching.Remove(System.String)">
            <summary>
            本地缓存移除
            </summary>
            <param name="name">key</param>
        </member>
        <member name="M:CBSS.Core.Utility.Caching.Set(System.String,System.Object)">
            <summary>
            本地缓存写入（默认缓存20min）
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:CBSS.Core.Utility.Caching.Set(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            本地缓存写入（默认缓存20min）,依赖项
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
            <param name="cacheDependency">依赖项</param>
        </member>
        <member name="M:CBSS.Core.Utility.Caching.Set(System.String,System.Object,System.Int32)">
            <summary>
            本地缓存写入
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
            <param name="minutes">缓存分钟</param>
        </member>
        <!-- 对于成员“M:CBSS.Core.Utility.Caching.Set(System.String,System.Object,System.Int32,System.Boolean,System.Web.Caching.CacheItemRemovedCallback)”忽略有格式错误的 XML 注释 -->
        <member name="M:CBSS.Core.Utility.Collection.Random``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            数组或list随机选出几个
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">数组或list</param>
            <param name="count">选出数量</param>
            <returns></returns>
        </member>
        <member name="T:CBSS.Core.Utility.ConverterHelper">
            <summary>
            各种值类型转换
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToInt(System.Int64)">
            <summary>
            字符串转Int
            </summary>
            <param name="value">小数</param>
            <returns>整数</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToInt(System.String)">
            <summary>
            字符串转Int
            </summary>
            <param name="value">小数</param>
            <returns>整数</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToInt(System.Decimal)">
            <summary>
            小数转整数，类似四舍五入
            </summary>
            <param name="value">小数</param>
            <returns>整数</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToInt(System.Double)">
            <summary>
            double转整数，类似四舍五入
            </summary>
            <param name="value">double</param>
            <returns>整数</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.CutOff(System.DateTime,System.Int64)">
            <summary>
            将时间精确到哪个级别
            </summary>
            <param name="dateTime"></param>
            <param name="cutTicks"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToCnDataString(System.DateTime)">
            <summary>
            把时间转换成字符串如：2013-8-2
            </summary>
            <param name="dateTime">DateTime</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToCnDataString(System.Nullable{System.DateTime})">
            <summary>
            把时间转换成字符串如：2013-8-2
            </summary>
            <param name="dateTime">DateTime</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToPrice(System.Decimal,System.String)">
            <summary>
            小数转成价格，如3.123123会转成3.12
            </summary>
            <param name="price"></param>
            <param name="format">小数位数格式</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToShortPriceRange(System.Decimal,System.Decimal)">
            <summary>
            价格区间，会转成如 200-300
            </summary>
            <param name="fromPrice"></param>
            <param name="toPrice"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToShortPrice(System.Decimal,System.Int32)">
            <summary>
            转成价格，如200.45将转成200，小于0时将转成"暂无价格"
            </summary>
            <param name="price"></param>
            <param name="decimalPlaces"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToCnDayPrice(System.Decimal,System.String)">
            <summary>
            转成价格，如"¥200/晚起"
            </summary>
            <param name="price"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToCnPrice(System.Decimal,System.String)">
            <summary>
            转成价格，如"¥200"
            </summary>
            <param name="price"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToStar(System.String,System.Int32)">
            <summary>
            人名字只留姓，后面用*填充
            </summary>
            <param name="s"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToScore(System.Double)">
            <summary>
            小数转评分，如3.6转成4，3.3转成3.5，3转成3
            </summary>
            <param name="score"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:CBSS.Core.Utility.ConverterHelper.ToPriceRange(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToDay(System.DateTime)">
            <summary>
            日期转当前天，跟今天比，如转成“今天”，“昨天”，不符和就转成如“2012-8-2”
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToWeek(System.String)">
            <summary>
            日期转星期几，如"星期日", "星期一"
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToInt(System.String,System.Int32)">
            <summary>
            字符串转int
            </summary>
            <param name="s"></param>
            <param name="defalut"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToBool(System.String,System.Boolean)">
            <summary>
            字符串转bool
            </summary>
            <param name="s"></param>
            <param name="defalut"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToDouble(System.String,System.Double)">
            <summary>
            字符串转double
            </summary>
            <param name="s"></param>
            <param name="defalut"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToDecimal(System.String,System.Decimal)">
            <summary>
            字符串转decimal
            </summary>
            <param name="s"></param>
            <param name="defalut"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToGuid(System.String)">
            <summary>
            字符串转GUID
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToDateTime(System.String,System.DateTime)">
            <summary>
            字符串转日期
            </summary>
            <param name="s"></param>
            <param name="defalut"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ConverterHelper.ToEnum``1(System.String)">
            <summary>
            字符串转Enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:CBSS.Core.Utility.Cookie">
            <summary>
            Cookie帮助类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.Cookie.Get(System.String)">
            <summary>
            取Cookie
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.Cookie.GetValue(System.String)">
            <summary>
            取Cookie值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.Cookie.Remove(System.String)">
            <summary>
            移除Cookie
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CBSS.Core.Utility.Cookie.Save(System.String,System.String,System.Int32)">
            <summary>
            保存Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="expiresHours"></param>
        </member>
        <member name="T:CBSS.Core.Utility.StringCompareHelper">
            <summary>
            Diff两个字符串
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.StringCompareHelper.Build(System.String,System.String,System.Boolean)">
            <summary>
            <para>toWord为真时，适合英文，将以单词为一个单位做比较，为false，将每个字符做比较，适合无html代码的纯中文</para>
            <para>请在Web显示输出时加入2个样式，参考：http://www.rohland.co.za/index.php/2009/10/31/csharp-html-diff-algorithm/ </para>
            </summary>
            <param name="oldText"></param>
            <param name="newText"></param>
            <param name="toWord"></param>
            <returns></returns>
        </member>
        <member name="T:CBSS.Core.Utility.HtmlDiff">
            <summary>
            Diff两个字符串
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.HtmlDiff.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="!:Diff"/> class.
            </summary>
            <param name="oldText">The old text.</param>
            <param name="newText">The new text.</param>
        </member>
        <member name="M:CBSS.Core.Utility.HtmlDiff.Build">
            <summary>
            Builds the HTML diff output
            </summary>
            <returns>HTML diff markup</returns>
        </member>
        <!-- 对于成员“M:CBSS.Core.Utility.HtmlDiff.InsertTag(System.String,System.String,System.Collections.Generic.List{System.String})”忽略有格式错误的 XML 注释 -->
        <member name="T:CBSS.Core.Utility.EnumHelper">
            <summary>
            枚举帮助类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetEnumDesc``1(System.Object)">
            <summary>
            获取枚举描述
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetEnumDescription(System.Enum)">
            <summary>
            根据枚举值获取特性
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetEnumName``1(System.Object)">
            <summary>
            获取枚举类型名称
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumValue">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.Parse``1(System.String)">
            <summary>
            转换如："enum1,enum2,enum3"字符串到枚举值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="obj">枚举字符串</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetEnumTitle(System.Enum,System.Enum)">
            <summary>
            根据枚举值，返回描述字符串
            如果多选枚举，返回以","分割的字符串
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetAllEnumTitle(System.Enum,System.Enum)">
            <summary>
            根据枚举值，返回描述字符串
            如果多选枚举，返回以","分割的字符串
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetTitleAndSynonyms``1(System.Enum)">
            <summary>
            返回键值对，建为枚举的EnumTitle中指定的名称和近义词名称，值为枚举项
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetItemList``1(System.Enum)">
            <summary>
            根据枚举获取包含所有所有值和描述的哈希表，其文本是由应用在枚举值上的EnumTitleAttribute设定
            </summary>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetAllItemList``1(System.Enum)">
            <summary>
            根据枚举获取包含所有所有值和描述的哈希表，其文本是由应用在枚举值上的EnumTitleAttribute设定
            </summary>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetItemValueList``1(System.Enum)">
            <summary>
            获取枚举所有项的标题,其文本是由应用在枚举值上的EnumTitleAttribute设定
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="language">语言</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetItemValueList``2(System.Boolean,System.Enum)">
            <summary>
            获取枚举所有项的标题,其文本是由应用在枚举值上的EnumTitleAttribute设定
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="isAll">是否生成“全部”项</param>
            <param name="language">语言</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetAllItemValueList``2(System.Enum)">
            <summary>
            获取枚举所有项的标题,其文本是由应用在枚举值上的EnumTitleAttribute设定
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="isAll">是否生成“全部”项</param>
            <param name="language">语言</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetEnumDictionary``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取一个枚举的键值对形式
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="exceptTypes">排除的枚举</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.EnumHelper.GetDescription(System.Object)">
            <summary>
            根据枚举成员获取DescriptionAttribute的属性Description
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="P:CBSS.Core.Utility.EnumTitleAttribute.Synonyms">
            <summary>
            近义词
            </summary>
        </member>
        <member name="T:CBSS.Core.Utility.ExceptionHelper">
            <summary>
            异常帮助类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.ExceptionHelper.Is``1(System.Exception)">
            <summary>
            判断异常是哪个异常类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:CBSS.Core.Utility.Fetch">
            <summary>
            Fetch 的摘要说明。
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.Fetch.Get(System.String)">
            <summary>
            获取Url后面的值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.Fetch.Post(System.String)">
            <summary>
            获取表单Post过来的值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.Fetch.GetQueryId(System.String)">
            <summary>
            获取Url后面的值，如.....aspx?productid=2将获取到"2"
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.Fetch.GetIds(System.String)">
            <summary>
            获取表单Post过来的值，如表单checkboxlist传ids:2,3,5过来，将是int[]{2,3,4}
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:CBSS.Core.Utility.Fetch.GetQueryIds(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="P:CBSS.Core.Utility.Fetch.CurrentUrl">
            <summary>
            获取当前页面的Url
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.Fetch.ServerDomain">
            <summary>
            获取当前页面的主域，如www.CBSS.com主域是CBSS.com
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.Fetch.UserIp">
            <summary>
            获取访问用户的IP
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.FileWatchHelper.m_timer">
            <summary>
            The timer used to compress the notification events.
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.FileWatchHelper.TimeoutMillis">
            <summary>
            The default amount of time to wait after receiving notification before reloading the config file.
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.FileWatchHelper.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="!:ConfigureAndWatchHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            <para>
            This handler reloads the configuration from the file when the event is fired.
            </para>
            </remarks>
        </member>
        <member name="M:CBSS.Core.Utility.FileWatchHelper.StartWatching(CBSS.Core.Utility.FileUpdate,System.String)">
            <summary>
            Start a watch
            </summary>
            <param name="updateProcess"></param>
            <param name="filePath"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:CBSS.Core.Utility.GeoHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            根据经纬度获取两点间距离，单位m
            </summary>
            <param name="lat1"></param>
            <param name="lng1"></param>
            <param name="lat2"></param>
            <param name="lng2"></param>
            <returns></returns>
        </member>
        <member name="T:CBSS.Core.Utility.ImagePosition">
            <summary>
            水印位置
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.ImagePosition.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.ImagePosition.LeftTop">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.ImagePosition.LeftBottom">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.ImagePosition.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:CBSS.Core.Utility.ImagePosition.RigthBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="T:CBSS.Core.Utility.ImageUtil">
            <summary>
            ImageUtil 的摘要说明。
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.ImageUtil.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.ImageUtil.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
             生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>	
            <param name="isaddwatermark">是否添加水印</param>	
            <param name="quality">图片品质</param>	
        </member>
        <member name="M:CBSS.Core.Utility.ImageUtil.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,CBSS.Core.Utility.ImagePosition,System.String,System.Int32)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>	
            <param name="isaddwatermark">是否添加水印</param>	
            <param name="quality">图片品质</param>	
            <param name="imagePosition">水印位置</param>	
            <param name="waterImage">水印图片名称</param>	
        </member>
        <member name="T:CBSS.Core.Utility.JsUtil">
            <summary>
            提供向页面输出客户端代码实现特殊功能的方法
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.JscriptSender(System.Web.UI.Page)">
            <summary>
            向客户端发送函数KendoPostBack(eventTarget, eventArgument)
            服务器端可接收__EVENTTARGET,__EVENTARGUMENT的值
            </summary>
            <param name="page">System.Web.UI.Page 一般为this</param>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.Alert(System.String)">
            <summary>
            弹出JavaScript小窗口
            </summary>
            <param name="js">窗口信息</param>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.GoHistory(System.Int32)">
            <summary>
            回到历史页面
            </summary>
            <param name="value">-1/1</param>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.CloseWindow">
            <summary>
            关闭当前窗口
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.RefreshParent">
            <summary>
            刷新父窗口
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.JSStringFormat(System.String)">
            <summary>
            格式化为JS可解释的字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.RefreshOpener">
            <summary>
            刷新打开窗口
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.OpenWebForm(System.String)">
            <summary>
            打开窗口
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.OpenWebForm(System.String,System.Boolean)">
            <summary>		
            函数名:OpenWebForm	
            功能描述:打开WEB窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-29 17:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="url">WEB窗口</param>
            <param name="isFullScreen">是否全屏幕</param>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.JavaScriptLocationHref(System.String)">
            <summary>
            转向Url制定的页面
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.JavaScriptFrameHref(System.String,System.String)">
            <summary>
            指定的框架页面转换
            </summary>
            <param name="FrameName"></param>
            <param name="url"></param>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.JavaScriptResetPage(System.String)">
             <summary>
            重置页面
             </summary>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.JavaScriptSetCookie(System.String,System.String)">
            <summary>
            函数名:JavaScriptSetCookie
            功能描述:客户端方法设置Cookie
            作者:sxs
            日期：2003-4-9
            版本：1.0
            </summary>
            <param name="strName">Cookie名</param>
            <param name="strValue">Cookie值</param>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.GotoParentWindow(System.String)">
            <summary>		
            函数名:GotoParentWindow	
            功能描述:返回父窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-30 10:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="parentWindowUrl">父窗口</param>		
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.ReplaceParentWindow(System.String,System.String,System.String)">
            <summary>		
            函数名:ReplaceParentWindow	
            功能描述:替换父窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-30 10:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="parentWindowUrl">父窗口</param>
            <param name="caption">窗口提示</param>
            <param name="future">窗口特征参数</param>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.ReplaceOpenerWindow(System.String)">
            <summary>		
            函数名:ReplaceOpenerWindow	
            功能描述:替换当前窗体的打开窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-30 16:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="openerWindowUrl">当前窗体的打开窗口</param>		
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.ReplaceOpenerParentFrame(System.String,System.String)">
            <summary>		
            函数名:ReplaceOpenerParentWindow	
            功能描述:替换当前窗体的打开窗口的父窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-07-03 19:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="openerWindowUrl">当前窗体的打开窗口的父窗口</param>		
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.ReplaceOpenerParentWindow(System.String)">
            <summary>		
            函数名:ReplaceOpenerParentWindow	
            功能描述:替换当前窗体的打开窗口的父窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-07-03 19:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="openerWindowUrl">当前窗体的打开窗口的父窗口</param>		
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.CloseParentWindow">
            <summary>		
            函数名:CloseParentWindow	
            功能描述:关闭窗口	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-30 16:00
            修 改:
            日 期:
            版 本:
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.ShowModalDialogJavascript(System.String)">
            <summary>
            函数名:ShowModalDialogJavascript	
            功能描述:返回打开模式窗口的脚本	
            处理流程:
            算法描述:
            作 者: guozili
            日 期: 2003-04-30 15:00
            修 改:
            日 期:
            版 本:
            </summary>
            <param name="webFormUrl"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.JsUtil.ShowModalDialogWindow(System.String)">
            <summary>
            </summary>
            <param name="webFormUrl"></param>
            <returns></returns>
        </member>
        <member name="T:CBSS.Core.Utility.MailHelper">
            <summary>
            邮件发送帮助类
            </summary>
        </member>
        <member name="T:CBSS.Core.Utility.HttpHelper">
            <summary>
            向远程Url Post/Get数据类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.HttpHelper.HttpGet(System.String)">
            <summary>
            http get通用方法
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.HttpHelper.ModHttpGet(System.String)">
            <summary>
            GET方法，仅限MOD接口专用
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="P:CBSS.Core.Utility.HttpHelper.CNNWebClient.Timeout">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.HttpHelper.CNNWebClient.GetWebRequest(System.Uri)">
            <summary>
            重写GetWebRequest,添加WebRequest对象超时时间
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ObjectHelper.DeepCopy``2(``0)">
            <summary>
            不同对象之间的深拷贝，最好属性名一样
            </summary>
            <typeparam name="T">源对象类型</typeparam>
            <typeparam name="F">目的对象类型</typeparam>
            <param name="original">源对象</param>
            <returns>目的对象</returns>
        </member>
        <member name="M:CBSS.Core.Utility.PermutationAndCombination`1.Swap(`0@,`0@)">
            <summary>
            交换两个变量
            </summary>
            <param name="a">变量1</param>
            <param name="b">变量2</param>
        </member>
        <member name="M:CBSS.Core.Utility.PermutationAndCombination`1.GetCombination(System.Collections.Generic.List{`0[]}@,`0[],System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            递归算法求数组的组合(私有成员)
            </summary>
            <param name="list">返回的范型</param>
            <param name="t">所求数组</param>
            <param name="n">辅助变量</param>
            <param name="m">辅助变量</param>
            <param name="b">辅助数组</param>
            <param name="M">辅助变量M</param>
        </member>
        <member name="M:CBSS.Core.Utility.PermutationAndCombination`1.GetPermutation(System.Collections.Generic.List{`0[]}@,`0[],System.Int32,System.Int32)">
            <summary>
            递归算法求排列(私有成员)
            </summary>
            <param name="list">返回的列表</param>
            <param name="t">所求数组</param>
            <param name="startIndex">起始标号</param>
            <param name="endIndex">结束标号</param>
        </member>
        <member name="M:CBSS.Core.Utility.PermutationAndCombination`1.GetPermutation(`0[],System.Int32,System.Int32)">
            <summary>
            求从起始标号到结束标号的排列，其余元素不变
            </summary>
            <param name="t">所求数组</param>
            <param name="startIndex">起始标号</param>
            <param name="endIndex">结束标号</param>
            <returns>从起始标号到结束标号排列的范型</returns>
        </member>
        <member name="M:CBSS.Core.Utility.PermutationAndCombination`1.GetPermutation(`0[])">
            <summary>
            返回数组所有元素的全排列
            </summary>
            <param name="t">所求数组</param>
            <returns>全排列的范型</returns>
        </member>
        <member name="M:CBSS.Core.Utility.PermutationAndCombination`1.GetPermutation(`0[],System.Int32)">
            <summary>
            求数组中n个元素的排列
            </summary>
            <param name="t">所求数组</param>
            <param name="n">元素个数</param>
            <returns>数组中n个元素的排列</returns>
        </member>
        <member name="M:CBSS.Core.Utility.PermutationAndCombination`1.GetCombination(`0[],System.Int32)">
            <summary>
            求数组中n个元素的组合
            </summary>
            <param name="t">所求数组</param>
            <param name="n">元素个数</param>
            <returns>数组中n个元素的组合的范型</returns>
        </member>
        <member name="T:CBSS.Core.Utility.RegHelper">
            <summary>
            常用正则匹配类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.RegHelper.IsGUID(System.String)">
            <summary>
            是否GUID
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.RegHelper.IsEmail(System.String)">
            <summary>
            是否电子邮件
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.RegHelper.IsIp(System.String)">
            <summary>
            是否Ip
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.RegHelper.IsNumeric(System.String)">
            <summary>
            是否整数
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.RegHelper.IsPhysicalPath(System.String)">
            <summary>
            是否绝对路径
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.RegHelper.IsRelativePath(System.String)">
            <summary>
            是否相对路径
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.RegHelper.IsSafety(System.String)">
            <summary>
            是否安全字符串，例如包含"slect insert"等注入关键字
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.RegHelper.IsIdentityCard(System.String)">
            <summary>
            是否是身份证号，验证以下3种情况:
            1、身份证号码为15位数字；
            2、身份证号码为18位数字；
            3、身份证号码为17位数字+1个字母  
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.RegHelper.IsMobileNo(System.String,System.Boolean)">
            <summary>
            是否是手机号
            </summary>
            <param name="s"></param>
            <param name="isRestrict">是否按严格格式验证</param>
            <returns></returns>
        </member>
        <member name="T:CBSS.Core.Utility.SystemDefault">
            <summary>
            系统默认值
            </summary>
        </member>
        <member name="P:CBSS.Core.Utility.SystemDefault.DefaultOrderNo">
            <summary>
            开通用户模块默认订单号
            </summary>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.GetAppSetting(System.String)">
            <summary>
            获取xml指定节点
            </summary>
            <param name="settingName"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.GetAppSetting(System.String,System.String)">
            <summary>
            获取xml指定节点
            </summary>
            <param name="settingName"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.GetAppSetting(System.String,System.String,System.String)">
            <summary>
            根据xml文件路径，获取指定节点
            </summary>
            <param name="filePath">文件路径</param>
            <param name="settingName">节点字段</param>
             /// <param name="settingName">子节点字段</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.GetAppSettingList(System.String,System.String,System.String)">
            <summary>
            根据xml文件路径，获取指定节点
            </summary>
            <param name="filePath">文件路径</param>
            <param name="settingName">节点字段</param>
             /// <param name="settingName">子节点字段</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.Read``1(System.String,System.String)">
            <summary>
            读取指定xml路径,获取字节点，并转换成实体
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.XmlSerialize(System.Object,System.String)">
            <summary>
            序列化，使用标准的XmlSerializer，优先考虑使用。
            不能序列化IDictionary接口.
            </summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.XmlDeserializeFromFile(System.Type,System.String)">
            <summary>
            反序列化，使用标准的XmlSerializer，优先考虑使用。
            不能序列化IDictionary接口.
            </summary>
            <param name="type">对象类型</param>
            <param name="filename">文件路径</param>
            <returns>type类型的对象实例</returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.FromXml``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlDocument"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.SaveToBinaryBytes(System.Object)">
            <summary>
            将对象使用二进制格式序列化成byte数组
            </summary>
            <param name="obj">待保存的对象</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.LoadFromBinaryBytes(System.Byte[])">
            <summary>
            将使用二进制格式保存的byte数组反序列化成对象
            </summary>
            <param name="bytes">byte数组</param>
            <returns>对象</returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.SaveToMemoryStream(System.Object)">
            <summary>
            使用BinaryFormatter将对象系列化到MemoryStream中。
            </summary>
            <param name="obj">对象</param>
            <returns>保存对象的MemoryStream</returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.JsonSerialize``1(``0)">
            <summary>
            将C#数据实体转化为JSON数据
            </summary>
            <param name="obj">要转化的数据实体</param>
            <returns>JSON格式字符串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.JsonSerialize(System.Object,System.Text.Encoding)">
            <summary>
            将C#数据实体转化为JSON数据
            </summary>
            <param name="obj">要转化的数据实体</param>
            <returns>JSON格式字符串</returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.JsonDeserialize``1(System.String)">
            <summary>
            将JSON数据转化为C#数据实体
            </summary>
            <param name="json">符合JSON格式的字符串</param>
            <returns>T类型的对象</returns>
        </member>
        <member name="M:CBSS.Core.Utility.XMLHelper.JsonDeserialize(System.Type,System.String)">
            <summary>
            将JSON数据转化为C#数据实体
            </summary>
            <param name="json">符合JSON格式的字符串</param>
            <returns>T类型的对象</returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringExtension.GetQuanPin(System.String)">
            <summary>
            获取中文全拼
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.StringExtension.IsNullOrEmpty(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:CBSS.Core.Utility.StringUtil">
            <summary>
            字符串操作工具集
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.Remove(System.String,System.String)">
            <summary>
            从字符串中的尾部删除指定的字符串
            </summary>
            <param name="sourceString"></param>
            <param name="removedString"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.RightSplit(System.String,System.Char)">
            <summary>
            获取拆分符右边的字符串
            </summary>
            <param name="sourceString"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.LeftSplit(System.String,System.Char)">
            <summary>
            获取拆分符左边的字符串
            </summary>
            <param name="sourceString"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.DelLastComma(System.String)">
            <summary>
            去掉最后一个逗号
            </summary>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.DeleteUnVisibleChar(System.String)">
            <summary>
            删除不可见字符
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.GetArrayString(System.String[])">
            <summary>
            获取数组元素的合并字符串
            </summary>
            <param name="stringArray"></param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.GetStringCount(System.String[],System.String)">
            <summary>
            	获取某一字符串在字符串数组中出现的次数
            </summary>
            <param name="stringArray" type="string[]">
                <para>
                    
                </para>
            </param>
            <param name="findString" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A int value...
            </returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.GetStringCount(System.String,System.String)">
            <summary>
                获取某一字符串在字符串中出现的次数
            </summary>
            <param name="stringArray" type="string">
                <para>
                    原字符串
                </para>
            </param>
            <param name="findString" type="string">
                <para>
                    匹配字符串
                </para>
            </param>
            <returns>
                匹配字符串数量
            </returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.GetSubString(System.String,System.String)">
            <summary>
            截取从startString开始到原字符串结尾的所有字符   
            </summary>
            <param name="sourceString" type="string">
                <para>
                    
                </para>
            </param>
            <param name="startString" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.GetByteCount(System.String)">
            <summary>
            按字节数取出字符串的长度
            </summary>
            <param name="strTmp">要计算的字符串</param>
            <returns>字符串的字节数</returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.GetByteIndex(System.Int32,System.String)">
            <summary>
            按字节数要在字符串的位置
            </summary>
            <param name="intIns">字符串的位置</param>
            <param name="strTmp">要计算的字符串</param>
            <returns>字节的位置</returns>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.CutString(System.String,System.Int32)">
            <summary>
            从包含中英文的字符串中截取固定长度的一段，inputString为传入字符串，len为截取长度（一个汉字占两个位）。
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.CutString(System.String,System.Int32,System.String)">
            <summary>
            从包含中英文的字符串中截取固定长度的一段，inputString为传入字符串，len为截取长度（一个汉字占两个位）。
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.RemoveHtml(System.String)">
            <summary>
            去除文本中的html代码。
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.ToSBC(System.String)">
             <summary>
             半角转全角(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>        
        </member>
        <member name="M:CBSS.Core.Utility.StringUtil.ToDBC(System.String)">
             <summary>
             全角转半角(DBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="T:CBSS.Core.Utility.WcfServiceProxy">
            <summary>
            Wcf帮助类
            </summary>
        </member>
        <member name="M:CBSS.Core.Utility.WcfServiceProxy.CreateServiceProxy``1(System.String)">
            <summary>
            动态创建Wcf客户端代理实例
            </summary>
            <typeparam name="T">Contract/接口</typeparam>
            <param name="uri">Wcf服务地址</param>
            <returns>代理实例</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ZipHelper.Zip(System.String,System.String)">
            <summary>
            压缩文件 和 文件夹
            </summary>
            <param name="FileToZip">待压缩的文件或文件夹，全路径格式</param>
            <param name="ZipedFile">压缩后生成的压缩文件名，全路径格式</param>
            <returns>压缩是否成功</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ZipHelper.ZipNo(System.String,System.String)">
            <summary>
            压缩文件 和 文件夹，不压缩顶级目录
            </summary>
            <param name="FolderToZip">待压缩的文件夹，全路径格式</param>
            <param name="ZipedFile">压缩后生成的压缩文件名，全路径格式</param>
            <returns>压缩是否成功</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ZipHelper.Zip(System.String,System.String,System.String)">
            <summary>
            压缩文件 和 文件夹
            </summary>
            <param name="FileToZip">待压缩的文件或文件夹，全路径格式</param>
            <param name="ZipedFile">压缩后生成的压缩文件名，全路径格式</param>
            <param name="Password">压缩密码</param>
            <returns>压缩是否成功</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ZipHelper.UnZip(System.String,System.String)">
            <summary>  
            功能：解压zip格式的文件。  
            </summary>  
            <param name="zipFilePath">压缩文件路径，全路径格式</param>  
            <param name="unZipDir">解压文件存放路径,全路径格式，为空时默认与压缩文件同一级目录下，跟压缩文件同名的文件夹</param>  
            <param name="err">出错信息</param>  
            <returns>解压是否成功</returns>  
        </member>
        <member name="M:CBSS.Core.Utility.ZipHelper.ZipFileDictory(System.String,System.String,System.String)">
            <summary>
            压缩目录
            </summary>
            <param name="FolderToZip">待压缩的文件夹，全路径格式</param>
            <param name="ZipedFile">压缩后的文件名，全路径格式，如果为空则文件名为待压缩的文件名加上.rar</param>
            <returns></returns>
        </member>
        <member name="M:CBSS.Core.Utility.ZipHelper.ZipFile(System.String,System.String,System.String)">
            <summary>
            压缩文件
            </summary>
            <param name="FileToZip">要进行压缩的文件名</param>
            <param name="ZipedFile">压缩后生成的压缩文件名，如果为空则文件名为待压缩的文件名加上.rar</param>
            <returns>压缩是否成功</returns>
        </member>
        <member name="M:CBSS.Core.Utility.ZipHelper.ZipFileDictory(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            递归压缩文件夹方法
            </summary>
            <param name="FolderToZip"></param>
            <param name="s"></param>
            <param name="ParentFolderName"></param>
        </member>
    </members>
</doc>
