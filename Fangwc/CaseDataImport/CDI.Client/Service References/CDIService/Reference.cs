//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CDI.Client.CDIService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CDIService.ICDIService")]
    public interface ICDIService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/Echo", ReplyAction="http://tempuri.org/ICDIService/EchoResponse")]
        string Echo(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/Echo", ReplyAction="http://tempuri.org/ICDIService/EchoResponse")]
        System.Threading.Tasks.Task<string> EchoAsync(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/ValidateAddress", ReplyAction="http://tempuri.org/ICDIService/ValidateAddressResponse")]
        byte[] ValidateAddress(byte[] addr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/ValidateAddress", ReplyAction="http://tempuri.org/ICDIService/ValidateAddressResponse")]
        System.Threading.Tasks.Task<byte[]> ValidateAddressAsync(byte[] addr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/Login", ReplyAction="http://tempuri.org/ICDIService/LoginResponse")]
        byte[] Login(byte[] user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/Login", ReplyAction="http://tempuri.org/ICDIService/LoginResponse")]
        System.Threading.Tasks.Task<byte[]> LoginAsync(byte[] user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/Logout", ReplyAction="http://tempuri.org/ICDIService/LogoutResponse")]
        byte[] Logout(byte[] user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/Logout", ReplyAction="http://tempuri.org/ICDIService/LogoutResponse")]
        System.Threading.Tasks.Task<byte[]> LogoutAsync(byte[] user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryCityInfoList", ReplyAction="http://tempuri.org/ICDIService/QueryCityInfoListResponse")]
        byte[] QueryCityInfoList(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryCityInfoList", ReplyAction="http://tempuri.org/ICDIService/QueryCityInfoListResponse")]
        System.Threading.Tasks.Task<byte[]> QueryCityInfoListAsync(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryAreaInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryAreaInfoMapResponse")]
        byte[] QueryAreaInfoMap(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryAreaInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryAreaInfoMapResponse")]
        System.Threading.Tasks.Task<byte[]> QueryAreaInfoMapAsync(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryPurposeInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryPurposeInfoMapResponse")]
        byte[] QueryPurposeInfoMap(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryPurposeInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryPurposeInfoMapResponse")]
        System.Threading.Tasks.Task<byte[]> QueryPurposeInfoMapAsync(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryFrontInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryFrontInfoMapResponse")]
        byte[] QueryFrontInfoMap(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryFrontInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryFrontInfoMapResponse")]
        System.Threading.Tasks.Task<byte[]> QueryFrontInfoMapAsync(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryBuildingTypeInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryBuildingTypeInfoMapResponse")]
        byte[] QueryBuildingTypeInfoMap(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryBuildingTypeInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryBuildingTypeInfoMapResponse")]
        System.Threading.Tasks.Task<byte[]> QueryBuildingTypeInfoMapAsync(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryHouseTypeInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryHouseTypeInfoMapResponse")]
        byte[] QueryHouseTypeInfoMap(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryHouseTypeInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryHouseTypeInfoMapResponse")]
        System.Threading.Tasks.Task<byte[]> QueryHouseTypeInfoMapAsync(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryStructureInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryStructureInfoMapResponse")]
        byte[] QueryStructureInfoMap(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryStructureInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryStructureInfoMapResponse")]
        System.Threading.Tasks.Task<byte[]> QueryStructureInfoMapAsync(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryFitmentInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryFitmentInfoMapResponse")]
        byte[] QueryFitmentInfoMap(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryFitmentInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryFitmentInfoMapResponse")]
        System.Threading.Tasks.Task<byte[]> QueryFitmentInfoMapAsync(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryMoneyUnitInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryMoneyUnitInfoMapResponse")]
        byte[] QueryMoneyUnitInfoMap(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryMoneyUnitInfoMap", ReplyAction="http://tempuri.org/ICDIService/QueryMoneyUnitInfoMapResponse")]
        System.Threading.Tasks.Task<byte[]> QueryMoneyUnitInfoMapAsync(byte[] userToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/BatchInsertDataCase", ReplyAction="http://tempuri.org/ICDIService/BatchInsertDataCaseResponse")]
        byte[] BatchInsertDataCase(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/BatchInsertDataCase", ReplyAction="http://tempuri.org/ICDIService/BatchInsertDataCaseResponse")]
        System.Threading.Tasks.Task<byte[]> BatchInsertDataCaseAsync(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryDataProjectList", ReplyAction="http://tempuri.org/ICDIService/QueryDataProjectListResponse")]
        byte[] QueryDataProjectList(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/QueryDataProjectList", ReplyAction="http://tempuri.org/ICDIService/QueryDataProjectListResponse")]
        System.Threading.Tasks.Task<byte[]> QueryDataProjectListAsync(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/PagingQueryProjectList", ReplyAction="http://tempuri.org/ICDIService/PagingQueryProjectListResponse")]
        byte[] PagingQueryProjectList(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/PagingQueryProjectList", ReplyAction="http://tempuri.org/ICDIService/PagingQueryProjectListResponse")]
        System.Threading.Tasks.Task<byte[]> PagingQueryProjectListAsync(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/GetNetworkNames", ReplyAction="http://tempuri.org/ICDIService/GetNetworkNamesResponse")]
        byte[] GetNetworkNames(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/GetNetworkNames", ReplyAction="http://tempuri.org/ICDIService/GetNetworkNamesResponse")]
        System.Threading.Tasks.Task<byte[]> GetNetworkNamesAsync(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/PagingQueryCityList", ReplyAction="http://tempuri.org/ICDIService/PagingQueryCityListResponse")]
        byte[] PagingQueryCityList(byte[] userToken, byte[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICDIService/PagingQueryCityList", ReplyAction="http://tempuri.org/ICDIService/PagingQueryCityListResponse")]
        System.Threading.Tasks.Task<byte[]> PagingQueryCityListAsync(byte[] userToken, byte[] args);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICDIServiceChannel : CDI.Client.CDIService.ICDIService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CDIServiceClient : System.ServiceModel.ClientBase<CDI.Client.CDIService.ICDIService>, CDI.Client.CDIService.ICDIService {
        
        public CDIServiceClient() {
        }
        
        public CDIServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CDIServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CDIServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CDIServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Echo(string msg) {
            return base.Channel.Echo(msg);
        }
        
        public System.Threading.Tasks.Task<string> EchoAsync(string msg) {
            return base.Channel.EchoAsync(msg);
        }
        
        public byte[] ValidateAddress(byte[] addr) {
            return base.Channel.ValidateAddress(addr);
        }
        
        public System.Threading.Tasks.Task<byte[]> ValidateAddressAsync(byte[] addr) {
            return base.Channel.ValidateAddressAsync(addr);
        }
        
        public byte[] Login(byte[] user) {
            return base.Channel.Login(user);
        }
        
        public System.Threading.Tasks.Task<byte[]> LoginAsync(byte[] user) {
            return base.Channel.LoginAsync(user);
        }
        
        public byte[] Logout(byte[] user) {
            return base.Channel.Logout(user);
        }
        
        public System.Threading.Tasks.Task<byte[]> LogoutAsync(byte[] user) {
            return base.Channel.LogoutAsync(user);
        }
        
        public byte[] QueryCityInfoList(byte[] userToken) {
            return base.Channel.QueryCityInfoList(userToken);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryCityInfoListAsync(byte[] userToken) {
            return base.Channel.QueryCityInfoListAsync(userToken);
        }
        
        public byte[] QueryAreaInfoMap(byte[] userToken, byte[] args) {
            return base.Channel.QueryAreaInfoMap(userToken, args);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryAreaInfoMapAsync(byte[] userToken, byte[] args) {
            return base.Channel.QueryAreaInfoMapAsync(userToken, args);
        }
        
        public byte[] QueryPurposeInfoMap(byte[] userToken) {
            return base.Channel.QueryPurposeInfoMap(userToken);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryPurposeInfoMapAsync(byte[] userToken) {
            return base.Channel.QueryPurposeInfoMapAsync(userToken);
        }
        
        public byte[] QueryFrontInfoMap(byte[] userToken) {
            return base.Channel.QueryFrontInfoMap(userToken);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryFrontInfoMapAsync(byte[] userToken) {
            return base.Channel.QueryFrontInfoMapAsync(userToken);
        }
        
        public byte[] QueryBuildingTypeInfoMap(byte[] userToken) {
            return base.Channel.QueryBuildingTypeInfoMap(userToken);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryBuildingTypeInfoMapAsync(byte[] userToken) {
            return base.Channel.QueryBuildingTypeInfoMapAsync(userToken);
        }
        
        public byte[] QueryHouseTypeInfoMap(byte[] userToken) {
            return base.Channel.QueryHouseTypeInfoMap(userToken);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryHouseTypeInfoMapAsync(byte[] userToken) {
            return base.Channel.QueryHouseTypeInfoMapAsync(userToken);
        }
        
        public byte[] QueryStructureInfoMap(byte[] userToken) {
            return base.Channel.QueryStructureInfoMap(userToken);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryStructureInfoMapAsync(byte[] userToken) {
            return base.Channel.QueryStructureInfoMapAsync(userToken);
        }
        
        public byte[] QueryFitmentInfoMap(byte[] userToken) {
            return base.Channel.QueryFitmentInfoMap(userToken);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryFitmentInfoMapAsync(byte[] userToken) {
            return base.Channel.QueryFitmentInfoMapAsync(userToken);
        }
        
        public byte[] QueryMoneyUnitInfoMap(byte[] userToken) {
            return base.Channel.QueryMoneyUnitInfoMap(userToken);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryMoneyUnitInfoMapAsync(byte[] userToken) {
            return base.Channel.QueryMoneyUnitInfoMapAsync(userToken);
        }
        
        public byte[] BatchInsertDataCase(byte[] userToken, byte[] args) {
            return base.Channel.BatchInsertDataCase(userToken, args);
        }
        
        public System.Threading.Tasks.Task<byte[]> BatchInsertDataCaseAsync(byte[] userToken, byte[] args) {
            return base.Channel.BatchInsertDataCaseAsync(userToken, args);
        }
        
        public byte[] QueryDataProjectList(byte[] userToken, byte[] args) {
            return base.Channel.QueryDataProjectList(userToken, args);
        }
        
        public System.Threading.Tasks.Task<byte[]> QueryDataProjectListAsync(byte[] userToken, byte[] args) {
            return base.Channel.QueryDataProjectListAsync(userToken, args);
        }
        
        public byte[] PagingQueryProjectList(byte[] userToken, byte[] args) {
            return base.Channel.PagingQueryProjectList(userToken, args);
        }
        
        public System.Threading.Tasks.Task<byte[]> PagingQueryProjectListAsync(byte[] userToken, byte[] args) {
            return base.Channel.PagingQueryProjectListAsync(userToken, args);
        }
        
        public byte[] GetNetworkNames(byte[] userToken, byte[] args) {
            return base.Channel.GetNetworkNames(userToken, args);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetNetworkNamesAsync(byte[] userToken, byte[] args) {
            return base.Channel.GetNetworkNamesAsync(userToken, args);
        }
        
        public byte[] PagingQueryCityList(byte[] userToken, byte[] args) {
            return base.Channel.PagingQueryCityList(userToken, args);
        }
        
        public System.Threading.Tasks.Task<byte[]> PagingQueryCityListAsync(byte[] userToken, byte[] args) {
            return base.Channel.PagingQueryCityListAsync(userToken, args);
        }
    }
}
