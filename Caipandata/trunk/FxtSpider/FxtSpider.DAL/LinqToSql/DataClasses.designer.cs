#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FxtSpider.DAL.LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FxtProject_RawData")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertSysData_案例类型(SysData_案例类型 instance);
    partial void UpdateSysData_案例类型(SysData_案例类型 instance);
    partial void DeleteSysData_案例类型(SysData_案例类型 instance);
    partial void InsertSysData_币种(SysData_币种 instance);
    partial void UpdateSysData_币种(SysData_币种 instance);
    partial void DeleteSysData_币种(SysData_币种 instance);
    partial void InsertSysData_朝向(SysData_朝向 instance);
    partial void UpdateSysData_朝向(SysData_朝向 instance);
    partial void DeleteSysData_朝向(SysData_朝向 instance);
    partial void InsertSysData_户型(SysData_户型 instance);
    partial void UpdateSysData_户型(SysData_户型 instance);
    partial void DeleteSysData_户型(SysData_户型 instance);
    partial void InsertSysData_建筑类型(SysData_建筑类型 instance);
    partial void UpdateSysData_建筑类型(SysData_建筑类型 instance);
    partial void DeleteSysData_建筑类型(SysData_建筑类型 instance);
    partial void InsertSysData_结构(SysData_结构 instance);
    partial void UpdateSysData_结构(SysData_结构 instance);
    partial void DeleteSysData_结构(SysData_结构 instance);
    partial void InsertSysData_用途(SysData_用途 instance);
    partial void UpdateSysData_用途(SysData_用途 instance);
    partial void DeleteSysData_用途(SysData_用途 instance);
    partial void InsertSysData_装修(SysData_装修 instance);
    partial void UpdateSysData_装修(SysData_装修 instance);
    partial void DeleteSysData_装修(SysData_装修 instance);
    partial void Insert案例库上传记录表(案例库上传记录表 instance);
    partial void Update案例库上传记录表(案例库上传记录表 instance);
    partial void Delete案例库上传记录表(案例库上传记录表 instance);
    partial void Insert城市表(城市表 instance);
    partial void Update城市表(城市表 instance);
    partial void Delete城市表(城市表 instance);
    partial void Insert省份表(省份表 instance);
    partial void Update省份表(省份表 instance);
    partial void Delete省份表(省份表 instance);
    partial void Insert新浪二手房_Log(新浪二手房_Log instance);
    partial void Update新浪二手房_Log(新浪二手房_Log instance);
    partial void Delete新浪二手房_Log(新浪二手房_Log instance);
    partial void InsertSysData_错误类型(SysData_错误类型 instance);
    partial void UpdateSysData_错误类型(SysData_错误类型 instance);
    partial void DeleteSysData_错误类型(SysData_错误类型 instance);
    partial void Insert案例库上传信息过滤表(案例库上传信息过滤表 instance);
    partial void Update案例库上传信息过滤表(案例库上传信息过滤表 instance);
    partial void Delete案例库上传信息过滤表(案例库上传信息过滤表 instance);
    partial void InsertSysData_Company(SysData_Company instance);
    partial void UpdateSysData_Company(SysData_Company instance);
    partial void DeleteSysData_Company(SysData_Company instance);
    partial void InsertSysData_CompanyArea(SysData_CompanyArea instance);
    partial void UpdateSysData_CompanyArea(SysData_CompanyArea instance);
    partial void DeleteSysData_CompanyArea(SysData_CompanyArea instance);
    partial void InsertSysData_Project(SysData_Project instance);
    partial void UpdateSysData_Project(SysData_Project instance);
    partial void DeleteSysData_Project(SysData_Project instance);
    partial void InsertSysData_ProjectCaseCount(SysData_ProjectCaseCount instance);
    partial void UpdateSysData_ProjectCaseCount(SysData_ProjectCaseCount instance);
    partial void DeleteSysData_ProjectCaseCount(SysData_ProjectCaseCount instance);
    partial void InsertSysData_SubArea(SysData_SubArea instance);
    partial void UpdateSysData_SubArea(SysData_SubArea instance);
    partial void DeleteSysData_SubArea(SysData_SubArea instance);
    partial void InsertSysData_Area(SysData_Area instance);
    partial void UpdateSysData_Area(SysData_Area instance);
    partial void DeleteSysData_Area(SysData_Area instance);
    partial void InsertSysData_WebJoinProxyIp(SysData_WebJoinProxyIp instance);
    partial void UpdateSysData_WebJoinProxyIp(SysData_WebJoinProxyIp instance);
    partial void DeleteSysData_WebJoinProxyIp(SysData_WebJoinProxyIp instance);
    partial void InsertSYS_Code(SYS_Code instance);
    partial void UpdateSYS_Code(SYS_Code instance);
    partial void DeleteSYS_Code(SYS_Code instance);
    partial void InsertDat_SpiderErrorLog(Dat_SpiderErrorLog instance);
    partial void UpdateDat_SpiderErrorLog(Dat_SpiderErrorLog instance);
    partial void DeleteDat_SpiderErrorLog(Dat_SpiderErrorLog instance);
    partial void InsertSysData_ProxyIp(SysData_ProxyIp instance);
    partial void UpdateSysData_ProxyIp(SysData_ProxyIp instance);
    partial void DeleteSysData_ProxyIp(SysData_ProxyIp instance);
    partial void Insert网站表(网站表 instance);
    partial void Update网站表(网站表 instance);
    partial void Delete网站表(网站表 instance);
    partial void InsertDat_SpiderRepetitionLog(Dat_SpiderRepetitionLog instance);
    partial void UpdateDat_SpiderRepetitionLog(Dat_SpiderRepetitionLog instance);
    partial void DeleteDat_SpiderRepetitionLog(Dat_SpiderRepetitionLog instance);
    partial void InsertDat_KeyValueConfig(Dat_KeyValueConfig instance);
    partial void UpdateDat_KeyValueConfig(Dat_KeyValueConfig instance);
    partial void DeleteDat_KeyValueConfig(Dat_KeyValueConfig instance);
    partial void InsertSysData_WorkItem(SysData_WorkItem instance);
    partial void UpdateSysData_WorkItem(SysData_WorkItem instance);
    partial void DeleteSysData_WorkItem(SysData_WorkItem instance);
    partial void Insert案例信息(案例信息 instance);
    partial void Update案例信息(案例信息 instance);
    partial void Delete案例信息(案例信息 instance);
    partial void Insert网站爬取配置(网站爬取配置 instance);
    partial void Update网站爬取配置(网站爬取配置 instance);
    partial void Delete网站爬取配置(网站爬取配置 instance);
    #endregion
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SysData_案例类型> SysData_案例类型
		{
			get
			{
				return this.GetTable<SysData_案例类型>();
			}
		}
		
		public System.Data.Linq.Table<SysData_币种> SysData_币种
		{
			get
			{
				return this.GetTable<SysData_币种>();
			}
		}
		
		public System.Data.Linq.Table<SysData_朝向> SysData_朝向
		{
			get
			{
				return this.GetTable<SysData_朝向>();
			}
		}
		
		public System.Data.Linq.Table<SysData_户型> SysData_户型
		{
			get
			{
				return this.GetTable<SysData_户型>();
			}
		}
		
		public System.Data.Linq.Table<SysData_建筑类型> SysData_建筑类型
		{
			get
			{
				return this.GetTable<SysData_建筑类型>();
			}
		}
		
		public System.Data.Linq.Table<SysData_结构> SysData_结构
		{
			get
			{
				return this.GetTable<SysData_结构>();
			}
		}
		
		public System.Data.Linq.Table<SysData_用途> SysData_用途
		{
			get
			{
				return this.GetTable<SysData_用途>();
			}
		}
		
		public System.Data.Linq.Table<SysData_装修> SysData_装修
		{
			get
			{
				return this.GetTable<SysData_装修>();
			}
		}
		
		public System.Data.Linq.Table<案例库上传记录表> 案例库上传记录表
		{
			get
			{
				return this.GetTable<案例库上传记录表>();
			}
		}
		
		public System.Data.Linq.Table<城市表> 城市表
		{
			get
			{
				return this.GetTable<城市表>();
			}
		}
		
		public System.Data.Linq.Table<省份表> 省份表
		{
			get
			{
				return this.GetTable<省份表>();
			}
		}
		
		public System.Data.Linq.Table<新浪二手房_Log> 新浪二手房_Log
		{
			get
			{
				return this.GetTable<新浪二手房_Log>();
			}
		}
		
		public System.Data.Linq.Table<SysData_错误类型> SysData_错误类型
		{
			get
			{
				return this.GetTable<SysData_错误类型>();
			}
		}
		
		public System.Data.Linq.Table<案例库上传信息过滤表> 案例库上传信息过滤表
		{
			get
			{
				return this.GetTable<案例库上传信息过滤表>();
			}
		}
		
		public System.Data.Linq.Table<SysData_Company> SysData_Company
		{
			get
			{
				return this.GetTable<SysData_Company>();
			}
		}
		
		public System.Data.Linq.Table<SysData_CompanyArea> SysData_CompanyArea
		{
			get
			{
				return this.GetTable<SysData_CompanyArea>();
			}
		}
		
		public System.Data.Linq.Table<SysData_Project> SysData_Project
		{
			get
			{
				return this.GetTable<SysData_Project>();
			}
		}
		
		public System.Data.Linq.Table<SysData_ProjectCaseCount> SysData_ProjectCaseCount
		{
			get
			{
				return this.GetTable<SysData_ProjectCaseCount>();
			}
		}
		
		public System.Data.Linq.Table<SysData_SubArea> SysData_SubArea
		{
			get
			{
				return this.GetTable<SysData_SubArea>();
			}
		}
		
		public System.Data.Linq.Table<SysData_Area> SysData_Area
		{
			get
			{
				return this.GetTable<SysData_Area>();
			}
		}
		
		public System.Data.Linq.Table<SysData_WebJoinProxyIp> SysData_WebJoinProxyIp
		{
			get
			{
				return this.GetTable<SysData_WebJoinProxyIp>();
			}
		}
		
		public System.Data.Linq.Table<SYS_Code> SYS_Code
		{
			get
			{
				return this.GetTable<SYS_Code>();
			}
		}
		
		public System.Data.Linq.Table<Dat_SpiderErrorLog> Dat_SpiderErrorLog
		{
			get
			{
				return this.GetTable<Dat_SpiderErrorLog>();
			}
		}
		
		public System.Data.Linq.Table<SysData_ProxyIp> SysData_ProxyIp
		{
			get
			{
				return this.GetTable<SysData_ProxyIp>();
			}
		}
		
		public System.Data.Linq.Table<View_WebJoinProxyIp> View_WebJoinProxyIp
		{
			get
			{
				return this.GetTable<View_WebJoinProxyIp>();
			}
		}
		
		public System.Data.Linq.Table<网站表> 网站表
		{
			get
			{
				return this.GetTable<网站表>();
			}
		}
		
		public System.Data.Linq.Table<Dat_SpiderRepetitionLog> Dat_SpiderRepetitionLog
		{
			get
			{
				return this.GetTable<Dat_SpiderRepetitionLog>();
			}
		}
		
		public System.Data.Linq.Table<Dat_KeyValueConfig> Dat_KeyValueConfig
		{
			get
			{
				return this.GetTable<Dat_KeyValueConfig>();
			}
		}
		
		public System.Data.Linq.Table<SysData_WorkItem> SysData_WorkItem
		{
			get
			{
				return this.GetTable<SysData_WorkItem>();
			}
		}
		
		public System.Data.Linq.Table<案例信息> 案例信息
		{
			get
			{
				return this.GetTable<案例信息>();
			}
		}
		
		public System.Data.Linq.Table<VIEW_案例信息_城市表_网站表> VIEW_案例信息_城市表_网站表
		{
			get
			{
				return this.GetTable<VIEW_案例信息_城市表_网站表>();
			}
		}
		
		public System.Data.Linq.Table<VIEW_案例信息_城市表_网站表2> VIEW_案例信息_城市表_网站表2
		{
			get
			{
				return this.GetTable<VIEW_案例信息_城市表_网站表2>();
			}
		}
		
		public System.Data.Linq.Table<网站爬取配置> 网站爬取配置
		{
			get
			{
				return this.GetTable<网站爬取配置>();
			}
		}
		
		public System.Data.Linq.Table<VIEW_网站爬取配置_城市表_网站表> VIEW_网站爬取配置_城市表_网站表
		{
			get
			{
				return this.GetTable<VIEW_网站爬取配置_城市表_网站表>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_案例信息_获取时间段内城市网站的爬取个数")]
		public ISingleResult<get_案例信息_获取时间段内城市网站的爬取个数Result> get_案例信息_获取时间段内城市网站的爬取个数([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> endDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate);
			return ((ISingleResult<get_案例信息_获取时间段内城市网站的爬取个数Result>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_案例信息_获取时间段内城市网站的未入库的案例个数")]
		public ISingleResult<get_案例信息_获取时间段内城市网站的未入库的案例个数Result> get_案例信息_获取时间段内城市网站的未入库的案例个数([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> endDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate);
			return ((ISingleResult<get_案例信息_获取时间段内城市网站的未入库的案例个数Result>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.get_案例信息_获取时间段内城市网站的已入库的案例个数")]
		public ISingleResult<get_案例信息_获取时间段内城市网站的已入库的案例个数Result> get_案例信息_获取时间段内城市网站的已入库的案例个数([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> startDate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> endDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate);
			return ((ISingleResult<get_案例信息_获取时间段内城市网站的已入库的案例个数Result>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_案例类型")]
	public partial class SysData_案例类型 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _案例类型;
		
		private string _code;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On案例类型Changing(string value);
    partial void On案例类型Changed();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public SysData_案例类型()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_案例类型", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 案例类型
		{
			get
			{
				return this._案例类型;
			}
			set
			{
				if ((this._案例类型 != value))
				{
					this.On案例类型Changing(value);
					this.SendPropertyChanging();
					this._案例类型 = value;
					this.SendPropertyChanged("案例类型");
					this.On案例类型Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_币种")]
	public partial class SysData_币种 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _币种;
		
		private string _code;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On币种Changing(string value);
    partial void On币种Changed();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public SysData_币种()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_币种", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 币种
		{
			get
			{
				return this._币种;
			}
			set
			{
				if ((this._币种 != value))
				{
					this.On币种Changing(value);
					this.SendPropertyChanging();
					this._币种 = value;
					this.SendPropertyChanged("币种");
					this.On币种Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_朝向")]
	public partial class SysData_朝向 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _朝向;
		
		private string _code;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On朝向Changing(string value);
    partial void On朝向Changed();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public SysData_朝向()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_朝向", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string 朝向
		{
			get
			{
				return this._朝向;
			}
			set
			{
				if ((this._朝向 != value))
				{
					this.On朝向Changing(value);
					this.SendPropertyChanging();
					this._朝向 = value;
					this.SendPropertyChanged("朝向");
					this.On朝向Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_户型")]
	public partial class SysData_户型 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _户型;
		
		private string _code;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On户型Changing(string value);
    partial void On户型Changed();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public SysData_户型()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_户型", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string 户型
		{
			get
			{
				return this._户型;
			}
			set
			{
				if ((this._户型 != value))
				{
					this.On户型Changing(value);
					this.SendPropertyChanging();
					this._户型 = value;
					this.SendPropertyChanged("户型");
					this.On户型Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_建筑类型")]
	public partial class SysData_建筑类型 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _建筑类型;
		
		private string _code;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On建筑类型Changing(string value);
    partial void On建筑类型Changed();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public SysData_建筑类型()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_建筑类型", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string 建筑类型
		{
			get
			{
				return this._建筑类型;
			}
			set
			{
				if ((this._建筑类型 != value))
				{
					this.On建筑类型Changing(value);
					this.SendPropertyChanging();
					this._建筑类型 = value;
					this.SendPropertyChanged("建筑类型");
					this.On建筑类型Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_结构")]
	public partial class SysData_结构 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _结构;
		
		private string _code;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On结构Changing(string value);
    partial void On结构Changed();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public SysData_结构()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_结构", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 结构
		{
			get
			{
				return this._结构;
			}
			set
			{
				if ((this._结构 != value))
				{
					this.On结构Changing(value);
					this.SendPropertyChanging();
					this._结构 = value;
					this.SendPropertyChanged("结构");
					this.On结构Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_用途")]
	public partial class SysData_用途 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _用途;
		
		private string _code;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On用途Changing(string value);
    partial void On用途Changed();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public SysData_用途()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用途", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string 用途
		{
			get
			{
				return this._用途;
			}
			set
			{
				if ((this._用途 != value))
				{
					this.On用途Changing(value);
					this.SendPropertyChanging();
					this._用途 = value;
					this.SendPropertyChanged("用途");
					this.On用途Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_装修")]
	public partial class SysData_装修 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _装修;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On装修Changing(string value);
    partial void On装修Changed();
    #endregion
		
		public SysData_装修()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_装修", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string 装修
		{
			get
			{
				return this._装修;
			}
			set
			{
				if ((this._装修 != value))
				{
					this.On装修Changing(value);
					this.SendPropertyChanging();
					this._装修 = value;
					this.SendPropertyChanged("装修");
					this.On装修Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.案例库上传记录表")]
	public partial class 案例库上传记录表 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _城市ID;
		
		private System.Nullable<int> _网站ID;
		
		private long _案例ID;
		
		private System.DateTime _上传时间;
		
		private EntityRef<城市表> _城市表;
		
		private EntityRef<网站表> _网站表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On城市IDChanging(int value);
    partial void On城市IDChanged();
    partial void On网站IDChanging(System.Nullable<int> value);
    partial void On网站IDChanged();
    partial void On案例IDChanging(long value);
    partial void On案例IDChanged();
    partial void On上传时间Changing(System.DateTime value);
    partial void On上传时间Changed();
    #endregion
		
		public 案例库上传记录表()
		{
			this._城市表 = default(EntityRef<城市表>);
			this._网站表 = default(EntityRef<网站表>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市ID", DbType="Int NOT NULL")]
		public int 城市ID
		{
			get
			{
				return this._城市ID;
			}
			set
			{
				if ((this._城市ID != value))
				{
					if (this._城市表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On城市IDChanging(value);
					this.SendPropertyChanging();
					this._城市ID = value;
					this.SendPropertyChanged("城市ID");
					this.On城市IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站ID", DbType="Int")]
		public System.Nullable<int> 网站ID
		{
			get
			{
				return this._网站ID;
			}
			set
			{
				if ((this._网站ID != value))
				{
					if (this._网站表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On网站IDChanging(value);
					this.SendPropertyChanging();
					this._网站ID = value;
					this.SendPropertyChanged("网站ID");
					this.On网站IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_案例ID", DbType="BigInt NOT NULL")]
		public long 案例ID
		{
			get
			{
				return this._案例ID;
			}
			set
			{
				if ((this._案例ID != value))
				{
					this.On案例IDChanging(value);
					this.SendPropertyChanging();
					this._案例ID = value;
					this.SendPropertyChanged("案例ID");
					this.On案例IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_上传时间", DbType="DateTime NOT NULL")]
		public System.DateTime 上传时间
		{
			get
			{
				return this._上传时间;
			}
			set
			{
				if ((this._上传时间 != value))
				{
					this.On上传时间Changing(value);
					this.SendPropertyChanging();
					this._上传时间 = value;
					this.SendPropertyChanged("上传时间");
					this.On上传时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_案例库上传记录表", Storage="_城市表", ThisKey="城市ID", OtherKey="ID", IsForeignKey=true)]
		public 城市表 城市表
		{
			get
			{
				return this._城市表.Entity;
			}
			set
			{
				城市表 previousValue = this._城市表.Entity;
				if (((previousValue != value) 
							|| (this._城市表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._城市表.Entity = null;
						previousValue.案例库上传记录表.Remove(this);
					}
					this._城市表.Entity = value;
					if ((value != null))
					{
						value.案例库上传记录表.Add(this);
						this._城市ID = value.ID;
					}
					else
					{
						this._城市ID = default(int);
					}
					this.SendPropertyChanged("城市表");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="网站表_案例库上传记录表", Storage="_网站表", ThisKey="网站ID", OtherKey="ID", IsForeignKey=true)]
		public 网站表 网站表
		{
			get
			{
				return this._网站表.Entity;
			}
			set
			{
				网站表 previousValue = this._网站表.Entity;
				if (((previousValue != value) 
							|| (this._网站表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._网站表.Entity = null;
						previousValue.案例库上传记录表.Remove(this);
					}
					this._网站表.Entity = value;
					if ((value != null))
					{
						value.案例库上传记录表.Add(this);
						this._网站ID = value.ID;
					}
					else
					{
						this._网站ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("网站表");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.城市表")]
	public partial class 城市表 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _城市名称;
		
		private int _省份ID;
		
		private EntitySet<案例库上传记录表> _案例库上传记录表;
		
		private EntitySet<案例库上传信息过滤表> _案例库上传信息过滤表;
		
		private EntitySet<SysData_Project> _SysData_Project;
		
		private EntitySet<SysData_SubArea> _SysData_SubArea;
		
		private EntitySet<SysData_Area> _SysData_Area;
		
		private EntitySet<SysData_WebJoinProxyIp> _SysData_WebJoinProxyIp;
		
		private EntitySet<Dat_SpiderErrorLog> _Dat_SpiderErrorLog;
		
		private EntitySet<案例信息> _案例信息;
		
		private EntitySet<网站爬取配置> _网站爬取配置;
		
		private EntityRef<省份表> _省份表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On城市名称Changing(string value);
    partial void On城市名称Changed();
    partial void On省份IDChanging(int value);
    partial void On省份IDChanged();
    #endregion
		
		public 城市表()
		{
			this._案例库上传记录表 = new EntitySet<案例库上传记录表>(new Action<案例库上传记录表>(this.attach_案例库上传记录表), new Action<案例库上传记录表>(this.detach_案例库上传记录表));
			this._案例库上传信息过滤表 = new EntitySet<案例库上传信息过滤表>(new Action<案例库上传信息过滤表>(this.attach_案例库上传信息过滤表), new Action<案例库上传信息过滤表>(this.detach_案例库上传信息过滤表));
			this._SysData_Project = new EntitySet<SysData_Project>(new Action<SysData_Project>(this.attach_SysData_Project), new Action<SysData_Project>(this.detach_SysData_Project));
			this._SysData_SubArea = new EntitySet<SysData_SubArea>(new Action<SysData_SubArea>(this.attach_SysData_SubArea), new Action<SysData_SubArea>(this.detach_SysData_SubArea));
			this._SysData_Area = new EntitySet<SysData_Area>(new Action<SysData_Area>(this.attach_SysData_Area), new Action<SysData_Area>(this.detach_SysData_Area));
			this._SysData_WebJoinProxyIp = new EntitySet<SysData_WebJoinProxyIp>(new Action<SysData_WebJoinProxyIp>(this.attach_SysData_WebJoinProxyIp), new Action<SysData_WebJoinProxyIp>(this.detach_SysData_WebJoinProxyIp));
			this._Dat_SpiderErrorLog = new EntitySet<Dat_SpiderErrorLog>(new Action<Dat_SpiderErrorLog>(this.attach_Dat_SpiderErrorLog), new Action<Dat_SpiderErrorLog>(this.detach_Dat_SpiderErrorLog));
			this._案例信息 = new EntitySet<案例信息>(new Action<案例信息>(this.attach_案例信息), new Action<案例信息>(this.detach_案例信息));
			this._网站爬取配置 = new EntitySet<网站爬取配置>(new Action<网站爬取配置>(this.attach_网站爬取配置), new Action<网站爬取配置>(this.detach_网站爬取配置));
			this._省份表 = default(EntityRef<省份表>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市名称", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string 城市名称
		{
			get
			{
				return this._城市名称;
			}
			set
			{
				if ((this._城市名称 != value))
				{
					this.On城市名称Changing(value);
					this.SendPropertyChanging();
					this._城市名称 = value;
					this.SendPropertyChanged("城市名称");
					this.On城市名称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_省份ID", DbType="Int NOT NULL")]
		public int 省份ID
		{
			get
			{
				return this._省份ID;
			}
			set
			{
				if ((this._省份ID != value))
				{
					if (this._省份表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On省份IDChanging(value);
					this.SendPropertyChanging();
					this._省份ID = value;
					this.SendPropertyChanged("省份ID");
					this.On省份IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_案例库上传记录表", Storage="_案例库上传记录表", ThisKey="ID", OtherKey="城市ID")]
		public EntitySet<案例库上传记录表> 案例库上传记录表
		{
			get
			{
				return this._案例库上传记录表;
			}
			set
			{
				this._案例库上传记录表.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_案例库上传信息过滤表", Storage="_案例库上传信息过滤表", ThisKey="ID", OtherKey="城市ID")]
		public EntitySet<案例库上传信息过滤表> 案例库上传信息过滤表
		{
			get
			{
				return this._案例库上传信息过滤表;
			}
			set
			{
				this._案例库上传信息过滤表.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_SysData_Project", Storage="_SysData_Project", ThisKey="ID", OtherKey="CityId")]
		public EntitySet<SysData_Project> SysData_Project
		{
			get
			{
				return this._SysData_Project;
			}
			set
			{
				this._SysData_Project.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_SysData_SubArea", Storage="_SysData_SubArea", ThisKey="ID", OtherKey="CityId")]
		public EntitySet<SysData_SubArea> SysData_SubArea
		{
			get
			{
				return this._SysData_SubArea;
			}
			set
			{
				this._SysData_SubArea.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_SysData_Area", Storage="_SysData_Area", ThisKey="ID", OtherKey="CityId")]
		public EntitySet<SysData_Area> SysData_Area
		{
			get
			{
				return this._SysData_Area;
			}
			set
			{
				this._SysData_Area.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_SysData_WebJoinProxyIp", Storage="_SysData_WebJoinProxyIp", ThisKey="ID", OtherKey="WebId")]
		public EntitySet<SysData_WebJoinProxyIp> SysData_WebJoinProxyIp
		{
			get
			{
				return this._SysData_WebJoinProxyIp;
			}
			set
			{
				this._SysData_WebJoinProxyIp.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_Dat_SpiderErrorLog", Storage="_Dat_SpiderErrorLog", ThisKey="ID", OtherKey="CityId")]
		public EntitySet<Dat_SpiderErrorLog> Dat_SpiderErrorLog
		{
			get
			{
				return this._Dat_SpiderErrorLog;
			}
			set
			{
				this._Dat_SpiderErrorLog.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_案例信息", Storage="_案例信息", ThisKey="ID", OtherKey="城市ID")]
		public EntitySet<案例信息> 案例信息
		{
			get
			{
				return this._案例信息;
			}
			set
			{
				this._案例信息.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_网站爬取配置", Storage="_网站爬取配置", ThisKey="ID", OtherKey="城市ID")]
		public EntitySet<网站爬取配置> 网站爬取配置
		{
			get
			{
				return this._网站爬取配置;
			}
			set
			{
				this._网站爬取配置.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="省份表_城市表", Storage="_省份表", ThisKey="省份ID", OtherKey="ID", IsForeignKey=true)]
		public 省份表 省份表
		{
			get
			{
				return this._省份表.Entity;
			}
			set
			{
				省份表 previousValue = this._省份表.Entity;
				if (((previousValue != value) 
							|| (this._省份表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._省份表.Entity = null;
						previousValue.城市表.Remove(this);
					}
					this._省份表.Entity = value;
					if ((value != null))
					{
						value.城市表.Add(this);
						this._省份ID = value.ID;
					}
					else
					{
						this._省份ID = default(int);
					}
					this.SendPropertyChanged("省份表");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_案例库上传记录表(案例库上传记录表 entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = this;
		}
		
		private void detach_案例库上传记录表(案例库上传记录表 entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = null;
		}
		
		private void attach_案例库上传信息过滤表(案例库上传信息过滤表 entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = this;
		}
		
		private void detach_案例库上传信息过滤表(案例库上传信息过滤表 entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = null;
		}
		
		private void attach_SysData_Project(SysData_Project entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = this;
		}
		
		private void detach_SysData_Project(SysData_Project entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = null;
		}
		
		private void attach_SysData_SubArea(SysData_SubArea entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = this;
		}
		
		private void detach_SysData_SubArea(SysData_SubArea entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = null;
		}
		
		private void attach_SysData_Area(SysData_Area entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = this;
		}
		
		private void detach_SysData_Area(SysData_Area entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = null;
		}
		
		private void attach_SysData_WebJoinProxyIp(SysData_WebJoinProxyIp entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = this;
		}
		
		private void detach_SysData_WebJoinProxyIp(SysData_WebJoinProxyIp entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = null;
		}
		
		private void attach_Dat_SpiderErrorLog(Dat_SpiderErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = this;
		}
		
		private void detach_Dat_SpiderErrorLog(Dat_SpiderErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = null;
		}
		
		private void attach_案例信息(案例信息 entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = this;
		}
		
		private void detach_案例信息(案例信息 entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = null;
		}
		
		private void attach_网站爬取配置(网站爬取配置 entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = this;
		}
		
		private void detach_网站爬取配置(网站爬取配置 entity)
		{
			this.SendPropertyChanging();
			entity.城市表 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.省份表")]
	public partial class 省份表 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _省份名称;
		
		private EntitySet<城市表> _城市表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On省份名称Changing(string value);
    partial void On省份名称Changed();
    #endregion
		
		public 省份表()
		{
			this._城市表 = new EntitySet<城市表>(new Action<城市表>(this.attach_城市表), new Action<城市表>(this.detach_城市表));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_省份名称", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string 省份名称
		{
			get
			{
				return this._省份名称;
			}
			set
			{
				if ((this._省份名称 != value))
				{
					this.On省份名称Changing(value);
					this.SendPropertyChanging();
					this._省份名称 = value;
					this.SendPropertyChanged("省份名称");
					this.On省份名称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="省份表_城市表", Storage="_城市表", ThisKey="ID", OtherKey="省份ID")]
		public EntitySet<城市表> 城市表
		{
			get
			{
				return this._城市表;
			}
			set
			{
				this._城市表.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_城市表(城市表 entity)
		{
			this.SendPropertyChanging();
			entity.省份表 = this;
		}
		
		private void detach_城市表(城市表 entity)
		{
			this.SendPropertyChanging();
			entity.省份表 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.新浪二手房_Log")]
	public partial class 新浪二手房_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _城市;
		
		private System.Nullable<int> _当前列表页面页码;
		
		private string _当前详细页面Url;
		
		private System.DateTime _创建时间;
		
		private System.Nullable<System.DateTime> _更新时间;
		
		private System.DateTime _开始爬取时间;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void On城市Changing(string value);
    partial void On城市Changed();
    partial void On当前列表页面页码Changing(System.Nullable<int> value);
    partial void On当前列表页面页码Changed();
    partial void On当前详细页面UrlChanging(string value);
    partial void On当前详细页面UrlChanged();
    partial void On创建时间Changing(System.DateTime value);
    partial void On创建时间Changed();
    partial void On更新时间Changing(System.Nullable<System.DateTime> value);
    partial void On更新时间Changed();
    partial void On开始爬取时间Changing(System.DateTime value);
    partial void On开始爬取时间Changed();
    #endregion
		
		public 新浪二手房_Log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 城市
		{
			get
			{
				return this._城市;
			}
			set
			{
				if ((this._城市 != value))
				{
					this.On城市Changing(value);
					this.SendPropertyChanging();
					this._城市 = value;
					this.SendPropertyChanged("城市");
					this.On城市Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_当前列表页面页码", DbType="Int")]
		public System.Nullable<int> 当前列表页面页码
		{
			get
			{
				return this._当前列表页面页码;
			}
			set
			{
				if ((this._当前列表页面页码 != value))
				{
					this.On当前列表页面页码Changing(value);
					this.SendPropertyChanging();
					this._当前列表页面页码 = value;
					this.SendPropertyChanged("当前列表页面页码");
					this.On当前列表页面页码Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_当前详细页面Url", DbType="NVarChar(500)")]
		public string 当前详细页面Url
		{
			get
			{
				return this._当前详细页面Url;
			}
			set
			{
				if ((this._当前详细页面Url != value))
				{
					this.On当前详细页面UrlChanging(value);
					this.SendPropertyChanging();
					this._当前详细页面Url = value;
					this.SendPropertyChanged("当前详细页面Url");
					this.On当前详细页面UrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_创建时间", DbType="DateTime NOT NULL")]
		public System.DateTime 创建时间
		{
			get
			{
				return this._创建时间;
			}
			set
			{
				if ((this._创建时间 != value))
				{
					this.On创建时间Changing(value);
					this.SendPropertyChanging();
					this._创建时间 = value;
					this.SendPropertyChanged("创建时间");
					this.On创建时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_更新时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 更新时间
		{
			get
			{
				return this._更新时间;
			}
			set
			{
				if ((this._更新时间 != value))
				{
					this.On更新时间Changing(value);
					this.SendPropertyChanging();
					this._更新时间 = value;
					this.SendPropertyChanged("更新时间");
					this.On更新时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_开始爬取时间", DbType="DateTime NOT NULL")]
		public System.DateTime 开始爬取时间
		{
			get
			{
				return this._开始爬取时间;
			}
			set
			{
				if ((this._开始爬取时间 != value))
				{
					this.On开始爬取时间Changing(value);
					this.SendPropertyChanging();
					this._开始爬取时间 = value;
					this.SendPropertyChanged("开始爬取时间");
					this.On开始爬取时间Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_错误类型")]
	public partial class SysData_错误类型 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _错误类型;
		
		private EntitySet<案例库上传信息过滤表> _案例库上传信息过滤表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On错误类型Changing(string value);
    partial void On错误类型Changed();
    #endregion
		
		public SysData_错误类型()
		{
			this._案例库上传信息过滤表 = new EntitySet<案例库上传信息过滤表>(new Action<案例库上传信息过滤表>(this.attach_案例库上传信息过滤表), new Action<案例库上传信息过滤表>(this.detach_案例库上传信息过滤表));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_错误类型", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string 错误类型
		{
			get
			{
				return this._错误类型;
			}
			set
			{
				if ((this._错误类型 != value))
				{
					this.On错误类型Changing(value);
					this.SendPropertyChanging();
					this._错误类型 = value;
					this.SendPropertyChanged("错误类型");
					this.On错误类型Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysData_错误类型_案例库上传信息过滤表", Storage="_案例库上传信息过滤表", ThisKey="ID", OtherKey="错误类型ID")]
		public EntitySet<案例库上传信息过滤表> 案例库上传信息过滤表
		{
			get
			{
				return this._案例库上传信息过滤表;
			}
			set
			{
				this._案例库上传信息过滤表.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_案例库上传信息过滤表(案例库上传信息过滤表 entity)
		{
			this.SendPropertyChanging();
			entity.SysData_错误类型 = this;
		}
		
		private void detach_案例库上传信息过滤表(案例库上传信息过滤表 entity)
		{
			this.SendPropertyChanging();
			entity.SysData_错误类型 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.案例库上传信息过滤表")]
	public partial class 案例库上传信息过滤表 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _城市ID;
		
		private System.Nullable<int> _网站ID;
		
		private long _案例ID;
		
		private int _错误类型ID;
		
		private string _错误说明;
		
		private System.DateTime _过滤时间;
		
		private EntityRef<SysData_错误类型> _SysData_错误类型;
		
		private EntityRef<城市表> _城市表;
		
		private EntityRef<网站表> _网站表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void On城市IDChanging(int value);
    partial void On城市IDChanged();
    partial void On网站IDChanging(System.Nullable<int> value);
    partial void On网站IDChanged();
    partial void On案例IDChanging(long value);
    partial void On案例IDChanged();
    partial void On错误类型IDChanging(int value);
    partial void On错误类型IDChanged();
    partial void On错误说明Changing(string value);
    partial void On错误说明Changed();
    partial void On过滤时间Changing(System.DateTime value);
    partial void On过滤时间Changed();
    #endregion
		
		public 案例库上传信息过滤表()
		{
			this._SysData_错误类型 = default(EntityRef<SysData_错误类型>);
			this._城市表 = default(EntityRef<城市表>);
			this._网站表 = default(EntityRef<网站表>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市ID", DbType="Int NOT NULL")]
		public int 城市ID
		{
			get
			{
				return this._城市ID;
			}
			set
			{
				if ((this._城市ID != value))
				{
					if (this._城市表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On城市IDChanging(value);
					this.SendPropertyChanging();
					this._城市ID = value;
					this.SendPropertyChanged("城市ID");
					this.On城市IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站ID", DbType="Int")]
		public System.Nullable<int> 网站ID
		{
			get
			{
				return this._网站ID;
			}
			set
			{
				if ((this._网站ID != value))
				{
					if (this._网站表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On网站IDChanging(value);
					this.SendPropertyChanging();
					this._网站ID = value;
					this.SendPropertyChanged("网站ID");
					this.On网站IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_案例ID", DbType="BigInt NOT NULL")]
		public long 案例ID
		{
			get
			{
				return this._案例ID;
			}
			set
			{
				if ((this._案例ID != value))
				{
					this.On案例IDChanging(value);
					this.SendPropertyChanging();
					this._案例ID = value;
					this.SendPropertyChanged("案例ID");
					this.On案例IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_错误类型ID", DbType="Int NOT NULL")]
		public int 错误类型ID
		{
			get
			{
				return this._错误类型ID;
			}
			set
			{
				if ((this._错误类型ID != value))
				{
					if (this._SysData_错误类型.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On错误类型IDChanging(value);
					this.SendPropertyChanging();
					this._错误类型ID = value;
					this.SendPropertyChanged("错误类型ID");
					this.On错误类型IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_错误说明", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string 错误说明
		{
			get
			{
				return this._错误说明;
			}
			set
			{
				if ((this._错误说明 != value))
				{
					this.On错误说明Changing(value);
					this.SendPropertyChanging();
					this._错误说明 = value;
					this.SendPropertyChanged("错误说明");
					this.On错误说明Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_过滤时间", DbType="DateTime NOT NULL")]
		public System.DateTime 过滤时间
		{
			get
			{
				return this._过滤时间;
			}
			set
			{
				if ((this._过滤时间 != value))
				{
					this.On过滤时间Changing(value);
					this.SendPropertyChanging();
					this._过滤时间 = value;
					this.SendPropertyChanged("过滤时间");
					this.On过滤时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysData_错误类型_案例库上传信息过滤表", Storage="_SysData_错误类型", ThisKey="错误类型ID", OtherKey="ID", IsForeignKey=true)]
		public SysData_错误类型 SysData_错误类型
		{
			get
			{
				return this._SysData_错误类型.Entity;
			}
			set
			{
				SysData_错误类型 previousValue = this._SysData_错误类型.Entity;
				if (((previousValue != value) 
							|| (this._SysData_错误类型.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SysData_错误类型.Entity = null;
						previousValue.案例库上传信息过滤表.Remove(this);
					}
					this._SysData_错误类型.Entity = value;
					if ((value != null))
					{
						value.案例库上传信息过滤表.Add(this);
						this._错误类型ID = value.ID;
					}
					else
					{
						this._错误类型ID = default(int);
					}
					this.SendPropertyChanged("SysData_错误类型");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_案例库上传信息过滤表", Storage="_城市表", ThisKey="城市ID", OtherKey="ID", IsForeignKey=true)]
		public 城市表 城市表
		{
			get
			{
				return this._城市表.Entity;
			}
			set
			{
				城市表 previousValue = this._城市表.Entity;
				if (((previousValue != value) 
							|| (this._城市表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._城市表.Entity = null;
						previousValue.案例库上传信息过滤表.Remove(this);
					}
					this._城市表.Entity = value;
					if ((value != null))
					{
						value.案例库上传信息过滤表.Add(this);
						this._城市ID = value.ID;
					}
					else
					{
						this._城市ID = default(int);
					}
					this.SendPropertyChanged("城市表");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="网站表_案例库上传信息过滤表", Storage="_网站表", ThisKey="网站ID", OtherKey="ID", IsForeignKey=true)]
		public 网站表 网站表
		{
			get
			{
				return this._网站表.Entity;
			}
			set
			{
				网站表 previousValue = this._网站表.Entity;
				if (((previousValue != value) 
							|| (this._网站表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._网站表.Entity = null;
						previousValue.案例库上传信息过滤表.Remove(this);
					}
					this._网站表.Entity = value;
					if ((value != null))
					{
						value.案例库上传信息过滤表.Add(this);
						this._网站ID = value.ID;
					}
					else
					{
						this._网站ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("网站表");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_Company")]
	public partial class SysData_Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _CompanyName;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    #endregion
		
		public SysData_Company()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="VarChar(900) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_CompanyArea")]
	public partial class SysData_CompanyArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _CompanyAreaName;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCompanyAreaNameChanging(string value);
    partial void OnCompanyAreaNameChanged();
    #endregion
		
		public SysData_CompanyArea()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAreaName", DbType="VarChar(900) NOT NULL", CanBeNull=false)]
		public string CompanyAreaName
		{
			get
			{
				return this._CompanyAreaName;
			}
			set
			{
				if ((this._CompanyAreaName != value))
				{
					this.OnCompanyAreaNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyAreaName = value;
					this.SendPropertyChanged("CompanyAreaName");
					this.OnCompanyAreaNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_Project")]
	public partial class SysData_Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _ProjectName;
		
		private int _CityId;
		
		private int _WebId;
		
		private EntityRef<城市表> _城市表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnWebIdChanging(int value);
    partial void OnWebIdChanged();
    #endregion
		
		public SysData_Project()
		{
			this._城市表 = default(EntityRef<城市表>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._城市表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebId", DbType="Int NOT NULL")]
		public int WebId
		{
			get
			{
				return this._WebId;
			}
			set
			{
				if ((this._WebId != value))
				{
					this.OnWebIdChanging(value);
					this.SendPropertyChanging();
					this._WebId = value;
					this.SendPropertyChanged("WebId");
					this.OnWebIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_SysData_Project", Storage="_城市表", ThisKey="CityId", OtherKey="ID", IsForeignKey=true)]
		public 城市表 城市表
		{
			get
			{
				return this._城市表.Entity;
			}
			set
			{
				城市表 previousValue = this._城市表.Entity;
				if (((previousValue != value) 
							|| (this._城市表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._城市表.Entity = null;
						previousValue.SysData_Project.Remove(this);
					}
					this._城市表.Entity = value;
					if ((value != null))
					{
						value.SysData_Project.Add(this);
						this._CityId = value.ID;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("城市表");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_ProjectCaseCount")]
	public partial class SysData_ProjectCaseCount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ProjectId;
		
		private long _AreaId;
		
		private int _NotImportCaseCount;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnProjectIdChanging(long value);
    partial void OnProjectIdChanged();
    partial void OnAreaIdChanging(long value);
    partial void OnAreaIdChanged();
    partial void OnNotImportCaseCountChanging(int value);
    partial void OnNotImportCaseCountChanged();
    #endregion
		
		public SysData_ProjectCaseCount()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt NOT NULL")]
		public long ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaId", DbType="BigInt NOT NULL")]
		public long AreaId
		{
			get
			{
				return this._AreaId;
			}
			set
			{
				if ((this._AreaId != value))
				{
					this.OnAreaIdChanging(value);
					this.SendPropertyChanging();
					this._AreaId = value;
					this.SendPropertyChanged("AreaId");
					this.OnAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotImportCaseCount", DbType="Int NOT NULL")]
		public int NotImportCaseCount
		{
			get
			{
				return this._NotImportCaseCount;
			}
			set
			{
				if ((this._NotImportCaseCount != value))
				{
					this.OnNotImportCaseCountChanging(value);
					this.SendPropertyChanging();
					this._NotImportCaseCount = value;
					this.SendPropertyChanged("NotImportCaseCount");
					this.OnNotImportCaseCountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_SubArea")]
	public partial class SysData_SubArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _SubAreaName;
		
		private int _CityId;
		
		private int _WebId;
		
		private EntityRef<城市表> _城市表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSubAreaNameChanging(string value);
    partial void OnSubAreaNameChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnWebIdChanging(int value);
    partial void OnWebIdChanged();
    #endregion
		
		public SysData_SubArea()
		{
			this._城市表 = default(EntityRef<城市表>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubAreaName", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string SubAreaName
		{
			get
			{
				return this._SubAreaName;
			}
			set
			{
				if ((this._SubAreaName != value))
				{
					this.OnSubAreaNameChanging(value);
					this.SendPropertyChanging();
					this._SubAreaName = value;
					this.SendPropertyChanged("SubAreaName");
					this.OnSubAreaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._城市表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebId", DbType="Int NOT NULL")]
		public int WebId
		{
			get
			{
				return this._WebId;
			}
			set
			{
				if ((this._WebId != value))
				{
					this.OnWebIdChanging(value);
					this.SendPropertyChanging();
					this._WebId = value;
					this.SendPropertyChanged("WebId");
					this.OnWebIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_SysData_SubArea", Storage="_城市表", ThisKey="CityId", OtherKey="ID", IsForeignKey=true)]
		public 城市表 城市表
		{
			get
			{
				return this._城市表.Entity;
			}
			set
			{
				城市表 previousValue = this._城市表.Entity;
				if (((previousValue != value) 
							|| (this._城市表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._城市表.Entity = null;
						previousValue.SysData_SubArea.Remove(this);
					}
					this._城市表.Entity = value;
					if ((value != null))
					{
						value.SysData_SubArea.Add(this);
						this._CityId = value.ID;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("城市表");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_Area")]
	public partial class SysData_Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _AreaName;
		
		private int _CityId;
		
		private int _WebId;
		
		private EntityRef<城市表> _城市表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnAreaNameChanging(string value);
    partial void OnAreaNameChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnWebIdChanging(int value);
    partial void OnWebIdChanged();
    #endregion
		
		public SysData_Area()
		{
			this._城市表 = default(EntityRef<城市表>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaName", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this.OnAreaNameChanging(value);
					this.SendPropertyChanging();
					this._AreaName = value;
					this.SendPropertyChanged("AreaName");
					this.OnAreaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._城市表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebId", DbType="Int NOT NULL")]
		public int WebId
		{
			get
			{
				return this._WebId;
			}
			set
			{
				if ((this._WebId != value))
				{
					this.OnWebIdChanging(value);
					this.SendPropertyChanging();
					this._WebId = value;
					this.SendPropertyChanged("WebId");
					this.OnWebIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_SysData_Area", Storage="_城市表", ThisKey="CityId", OtherKey="ID", IsForeignKey=true)]
		public 城市表 城市表
		{
			get
			{
				return this._城市表.Entity;
			}
			set
			{
				城市表 previousValue = this._城市表.Entity;
				if (((previousValue != value) 
							|| (this._城市表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._城市表.Entity = null;
						previousValue.SysData_Area.Remove(this);
					}
					this._城市表.Entity = value;
					if ((value != null))
					{
						value.SysData_Area.Add(this);
						this._CityId = value.ID;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("城市表");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_WebJoinProxyIp")]
	public partial class SysData_WebJoinProxyIp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _WebId;
		
		private long _ProxyIp;
		
		private int _Status;
		
		private System.DateTime _CreateTime;
		
		private EntityRef<城市表> _城市表;
		
		private EntityRef<SysData_ProxyIp> _SysData_ProxyIp;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnWebIdChanging(int value);
    partial void OnWebIdChanged();
    partial void OnProxyIpChanging(long value);
    partial void OnProxyIpChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public SysData_WebJoinProxyIp()
		{
			this._城市表 = default(EntityRef<城市表>);
			this._SysData_ProxyIp = default(EntityRef<SysData_ProxyIp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebId", DbType="Int NOT NULL")]
		public int WebId
		{
			get
			{
				return this._WebId;
			}
			set
			{
				if ((this._WebId != value))
				{
					if (this._城市表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebIdChanging(value);
					this.SendPropertyChanging();
					this._WebId = value;
					this.SendPropertyChanged("WebId");
					this.OnWebIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProxyIp", DbType="BigInt NOT NULL")]
		public long ProxyIp
		{
			get
			{
				return this._ProxyIp;
			}
			set
			{
				if ((this._ProxyIp != value))
				{
					if (this._SysData_ProxyIp.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProxyIpChanging(value);
					this.SendPropertyChanging();
					this._ProxyIp = value;
					this.SendPropertyChanged("ProxyIp");
					this.OnProxyIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_SysData_WebJoinProxyIp", Storage="_城市表", ThisKey="WebId", OtherKey="ID", IsForeignKey=true)]
		public 城市表 城市表
		{
			get
			{
				return this._城市表.Entity;
			}
			set
			{
				城市表 previousValue = this._城市表.Entity;
				if (((previousValue != value) 
							|| (this._城市表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._城市表.Entity = null;
						previousValue.SysData_WebJoinProxyIp.Remove(this);
					}
					this._城市表.Entity = value;
					if ((value != null))
					{
						value.SysData_WebJoinProxyIp.Add(this);
						this._WebId = value.ID;
					}
					else
					{
						this._WebId = default(int);
					}
					this.SendPropertyChanged("城市表");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysData_ProxyIp_SysData_WebJoinProxyIp", Storage="_SysData_ProxyIp", ThisKey="ProxyIp", OtherKey="ID", IsForeignKey=true)]
		public SysData_ProxyIp SysData_ProxyIp
		{
			get
			{
				return this._SysData_ProxyIp.Entity;
			}
			set
			{
				SysData_ProxyIp previousValue = this._SysData_ProxyIp.Entity;
				if (((previousValue != value) 
							|| (this._SysData_ProxyIp.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SysData_ProxyIp.Entity = null;
						previousValue.SysData_WebJoinProxyIp.Remove(this);
					}
					this._SysData_ProxyIp.Entity = value;
					if ((value != null))
					{
						value.SysData_WebJoinProxyIp.Add(this);
						this._ProxyIp = value.ID;
					}
					else
					{
						this._ProxyIp = default(long);
					}
					this.SendPropertyChanged("SysData_ProxyIp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SYS_Code")]
	public partial class SYS_Code : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Code;
		
		private string _CodeName;
		
		private string _CodeType;
		
		private string _Remark;
		
		private System.Nullable<int> _SubCode;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnCodeNameChanging(string value);
    partial void OnCodeNameChanged();
    partial void OnCodeTypeChanging(string value);
    partial void OnCodeTypeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnSubCodeChanging(System.Nullable<int> value);
    partial void OnSubCodeChanged();
    #endregion
		
		public SYS_Code()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CodeName
		{
			get
			{
				return this._CodeName;
			}
			set
			{
				if ((this._CodeName != value))
				{
					this.OnCodeNameChanging(value);
					this.SendPropertyChanging();
					this._CodeName = value;
					this.SendPropertyChanged("CodeName");
					this.OnCodeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeType", DbType="NVarChar(50)")]
		public string CodeType
		{
			get
			{
				return this._CodeType;
			}
			set
			{
				if ((this._CodeType != value))
				{
					this.OnCodeTypeChanging(value);
					this.SendPropertyChanging();
					this._CodeType = value;
					this.SendPropertyChanged("CodeType");
					this.OnCodeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="NVarChar(255)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCode", DbType="Int")]
		public System.Nullable<int> SubCode
		{
			get
			{
				return this._SubCode;
			}
			set
			{
				if ((this._SubCode != value))
				{
					this.OnSubCodeChanging(value);
					this.SendPropertyChanging();
					this._SubCode = value;
					this.SendPropertyChanged("SubCode");
					this.OnSubCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dat_SpiderErrorLog")]
	public partial class Dat_SpiderErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _CityId;
		
		private int _WebId;
		
		private string _Url;
		
		private int _ErrorTypeCode;
		
		private System.DateTime _CreateTime;
		
		private string _Remark;
		
		private EntityRef<城市表> _城市表;
		
		private EntityRef<网站表> _网站表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnWebIdChanging(int value);
    partial void OnWebIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnErrorTypeCodeChanging(int value);
    partial void OnErrorTypeCodeChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public Dat_SpiderErrorLog()
		{
			this._城市表 = default(EntityRef<城市表>);
			this._网站表 = default(EntityRef<网站表>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._城市表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebId", DbType="Int NOT NULL")]
		public int WebId
		{
			get
			{
				return this._WebId;
			}
			set
			{
				if ((this._WebId != value))
				{
					if (this._网站表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebIdChanging(value);
					this.SendPropertyChanging();
					this._WebId = value;
					this.SendPropertyChanged("WebId");
					this.OnWebIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="VarChar(900) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorTypeCode", DbType="Int NOT NULL")]
		public int ErrorTypeCode
		{
			get
			{
				return this._ErrorTypeCode;
			}
			set
			{
				if ((this._ErrorTypeCode != value))
				{
					this.OnErrorTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._ErrorTypeCode = value;
					this.SendPropertyChanged("ErrorTypeCode");
					this.OnErrorTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="VarChar(900)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_Dat_SpiderErrorLog", Storage="_城市表", ThisKey="CityId", OtherKey="ID", IsForeignKey=true)]
		public 城市表 城市表
		{
			get
			{
				return this._城市表.Entity;
			}
			set
			{
				城市表 previousValue = this._城市表.Entity;
				if (((previousValue != value) 
							|| (this._城市表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._城市表.Entity = null;
						previousValue.Dat_SpiderErrorLog.Remove(this);
					}
					this._城市表.Entity = value;
					if ((value != null))
					{
						value.Dat_SpiderErrorLog.Add(this);
						this._CityId = value.ID;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("城市表");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="网站表_Dat_SpiderErrorLog", Storage="_网站表", ThisKey="WebId", OtherKey="ID", IsForeignKey=true)]
		public 网站表 网站表
		{
			get
			{
				return this._网站表.Entity;
			}
			set
			{
				网站表 previousValue = this._网站表.Entity;
				if (((previousValue != value) 
							|| (this._网站表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._网站表.Entity = null;
						previousValue.Dat_SpiderErrorLog.Remove(this);
					}
					this._网站表.Entity = value;
					if ((value != null))
					{
						value.Dat_SpiderErrorLog.Add(this);
						this._WebId = value.ID;
					}
					else
					{
						this._WebId = default(int);
					}
					this.SendPropertyChanged("网站表");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_ProxyIp")]
	public partial class SysData_ProxyIp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Ip;
		
		private System.DateTime _CreateTime;
		
		private string _IpArea;
		
		private EntitySet<SysData_WebJoinProxyIp> _SysData_WebJoinProxyIp;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnIpAreaChanging(string value);
    partial void OnIpAreaChanged();
    #endregion
		
		public SysData_ProxyIp()
		{
			this._SysData_WebJoinProxyIp = new EntitySet<SysData_WebJoinProxyIp>(new Action<SysData_WebJoinProxyIp>(this.attach_SysData_WebJoinProxyIp), new Action<SysData_WebJoinProxyIp>(this.detach_SysData_WebJoinProxyIp));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpArea", DbType="NVarChar(50)")]
		public string IpArea
		{
			get
			{
				return this._IpArea;
			}
			set
			{
				if ((this._IpArea != value))
				{
					this.OnIpAreaChanging(value);
					this.SendPropertyChanging();
					this._IpArea = value;
					this.SendPropertyChanged("IpArea");
					this.OnIpAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysData_ProxyIp_SysData_WebJoinProxyIp", Storage="_SysData_WebJoinProxyIp", ThisKey="ID", OtherKey="ProxyIp")]
		public EntitySet<SysData_WebJoinProxyIp> SysData_WebJoinProxyIp
		{
			get
			{
				return this._SysData_WebJoinProxyIp;
			}
			set
			{
				this._SysData_WebJoinProxyIp.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SysData_WebJoinProxyIp(SysData_WebJoinProxyIp entity)
		{
			this.SendPropertyChanging();
			entity.SysData_ProxyIp = this;
		}
		
		private void detach_SysData_WebJoinProxyIp(SysData_WebJoinProxyIp entity)
		{
			this.SendPropertyChanging();
			entity.SysData_ProxyIp = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_WebJoinProxyIp")]
	public partial class View_WebJoinProxyIp
	{
		
		private long _ID;
		
		private int _WebId;
		
		private string _WebName;
		
		private long _ProxyIp;
		
		private int _Status;
		
		private System.DateTime _CreateTime;
		
		private string _Ip;
		
		private System.Nullable<System.DateTime> _IpCreateTime;
		
		private string _IpArea;
		
		public View_WebJoinProxyIp()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebId", DbType="Int NOT NULL")]
		public int WebId
		{
			get
			{
				return this._WebId;
			}
			set
			{
				if ((this._WebId != value))
				{
					this._WebId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebName", DbType="NVarChar(500)")]
		public string WebName
		{
			get
			{
				return this._WebName;
			}
			set
			{
				if ((this._WebName != value))
				{
					this._WebName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProxyIp", DbType="BigInt NOT NULL")]
		public long ProxyIp
		{
			get
			{
				return this._ProxyIp;
			}
			set
			{
				if ((this._ProxyIp != value))
				{
					this._ProxyIp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this._CreateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(800)")]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this._Ip = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpCreateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> IpCreateTime
		{
			get
			{
				return this._IpCreateTime;
			}
			set
			{
				if ((this._IpCreateTime != value))
				{
					this._IpCreateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpArea", DbType="NVarChar(50)")]
		public string IpArea
		{
			get
			{
				return this._IpArea;
			}
			set
			{
				if ((this._IpArea != value))
				{
					this._IpArea = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.网站表")]
	public partial class 网站表 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _网站名称;
		
		private bool _BlockadeOfIP;
		
		private System.Nullable<int> _BlockadeOfIPType;
		
		private EntitySet<案例库上传记录表> _案例库上传记录表;
		
		private EntitySet<案例库上传信息过滤表> _案例库上传信息过滤表;
		
		private EntitySet<Dat_SpiderErrorLog> _Dat_SpiderErrorLog;
		
		private EntitySet<案例信息> _案例信息;
		
		private EntitySet<网站爬取配置> _网站爬取配置;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On网站名称Changing(string value);
    partial void On网站名称Changed();
    partial void OnBlockadeOfIPChanging(bool value);
    partial void OnBlockadeOfIPChanged();
    partial void OnBlockadeOfIPTypeChanging(System.Nullable<int> value);
    partial void OnBlockadeOfIPTypeChanged();
    #endregion
		
		public 网站表()
		{
			this._案例库上传记录表 = new EntitySet<案例库上传记录表>(new Action<案例库上传记录表>(this.attach_案例库上传记录表), new Action<案例库上传记录表>(this.detach_案例库上传记录表));
			this._案例库上传信息过滤表 = new EntitySet<案例库上传信息过滤表>(new Action<案例库上传信息过滤表>(this.attach_案例库上传信息过滤表), new Action<案例库上传信息过滤表>(this.detach_案例库上传信息过滤表));
			this._Dat_SpiderErrorLog = new EntitySet<Dat_SpiderErrorLog>(new Action<Dat_SpiderErrorLog>(this.attach_Dat_SpiderErrorLog), new Action<Dat_SpiderErrorLog>(this.detach_Dat_SpiderErrorLog));
			this._案例信息 = new EntitySet<案例信息>(new Action<案例信息>(this.attach_案例信息), new Action<案例信息>(this.detach_案例信息));
			this._网站爬取配置 = new EntitySet<网站爬取配置>(new Action<网站爬取配置>(this.attach_网站爬取配置), new Action<网站爬取配置>(this.detach_网站爬取配置));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站名称", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string 网站名称
		{
			get
			{
				return this._网站名称;
			}
			set
			{
				if ((this._网站名称 != value))
				{
					this.On网站名称Changing(value);
					this.SendPropertyChanging();
					this._网站名称 = value;
					this.SendPropertyChanged("网站名称");
					this.On网站名称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockadeOfIP", DbType="Bit NOT NULL")]
		public bool BlockadeOfIP
		{
			get
			{
				return this._BlockadeOfIP;
			}
			set
			{
				if ((this._BlockadeOfIP != value))
				{
					this.OnBlockadeOfIPChanging(value);
					this.SendPropertyChanging();
					this._BlockadeOfIP = value;
					this.SendPropertyChanged("BlockadeOfIP");
					this.OnBlockadeOfIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockadeOfIPType", DbType="Int")]
		public System.Nullable<int> BlockadeOfIPType
		{
			get
			{
				return this._BlockadeOfIPType;
			}
			set
			{
				if ((this._BlockadeOfIPType != value))
				{
					this.OnBlockadeOfIPTypeChanging(value);
					this.SendPropertyChanging();
					this._BlockadeOfIPType = value;
					this.SendPropertyChanged("BlockadeOfIPType");
					this.OnBlockadeOfIPTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="网站表_案例库上传记录表", Storage="_案例库上传记录表", ThisKey="ID", OtherKey="网站ID")]
		public EntitySet<案例库上传记录表> 案例库上传记录表
		{
			get
			{
				return this._案例库上传记录表;
			}
			set
			{
				this._案例库上传记录表.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="网站表_案例库上传信息过滤表", Storage="_案例库上传信息过滤表", ThisKey="ID", OtherKey="网站ID")]
		public EntitySet<案例库上传信息过滤表> 案例库上传信息过滤表
		{
			get
			{
				return this._案例库上传信息过滤表;
			}
			set
			{
				this._案例库上传信息过滤表.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="网站表_Dat_SpiderErrorLog", Storage="_Dat_SpiderErrorLog", ThisKey="ID", OtherKey="WebId")]
		public EntitySet<Dat_SpiderErrorLog> Dat_SpiderErrorLog
		{
			get
			{
				return this._Dat_SpiderErrorLog;
			}
			set
			{
				this._Dat_SpiderErrorLog.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="网站表_案例信息", Storage="_案例信息", ThisKey="ID", OtherKey="网站ID")]
		public EntitySet<案例信息> 案例信息
		{
			get
			{
				return this._案例信息;
			}
			set
			{
				this._案例信息.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="网站表_网站爬取配置", Storage="_网站爬取配置", ThisKey="ID", OtherKey="网站ID")]
		public EntitySet<网站爬取配置> 网站爬取配置
		{
			get
			{
				return this._网站爬取配置;
			}
			set
			{
				this._网站爬取配置.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_案例库上传记录表(案例库上传记录表 entity)
		{
			this.SendPropertyChanging();
			entity.网站表 = this;
		}
		
		private void detach_案例库上传记录表(案例库上传记录表 entity)
		{
			this.SendPropertyChanging();
			entity.网站表 = null;
		}
		
		private void attach_案例库上传信息过滤表(案例库上传信息过滤表 entity)
		{
			this.SendPropertyChanging();
			entity.网站表 = this;
		}
		
		private void detach_案例库上传信息过滤表(案例库上传信息过滤表 entity)
		{
			this.SendPropertyChanging();
			entity.网站表 = null;
		}
		
		private void attach_Dat_SpiderErrorLog(Dat_SpiderErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.网站表 = this;
		}
		
		private void detach_Dat_SpiderErrorLog(Dat_SpiderErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.网站表 = null;
		}
		
		private void attach_案例信息(案例信息 entity)
		{
			this.SendPropertyChanging();
			entity.网站表 = this;
		}
		
		private void detach_案例信息(案例信息 entity)
		{
			this.SendPropertyChanging();
			entity.网站表 = null;
		}
		
		private void attach_网站爬取配置(网站爬取配置 entity)
		{
			this.SendPropertyChanging();
			entity.网站表 = this;
		}
		
		private void detach_网站爬取配置(网站爬取配置 entity)
		{
			this.SendPropertyChanging();
			entity.网站表 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dat_SpiderRepetitionLog")]
	public partial class Dat_SpiderRepetitionLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _WebId;
		
		private int _CityId;
		
		private long _RepetitionCount;
		
		private string _Date;
		
		private System.DateTime _UpdateTime;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnWebIdChanging(int value);
    partial void OnWebIdChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnRepetitionCountChanging(long value);
    partial void OnRepetitionCountChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnUpdateTimeChanging(System.DateTime value);
    partial void OnUpdateTimeChanged();
    #endregion
		
		public Dat_SpiderRepetitionLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebId", DbType="Int NOT NULL")]
		public int WebId
		{
			get
			{
				return this._WebId;
			}
			set
			{
				if ((this._WebId != value))
				{
					this.OnWebIdChanging(value);
					this.SendPropertyChanging();
					this._WebId = value;
					this.SendPropertyChanged("WebId");
					this.OnWebIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepetitionCount", DbType="BigInt NOT NULL")]
		public long RepetitionCount
		{
			get
			{
				return this._RepetitionCount;
			}
			set
			{
				if ((this._RepetitionCount != value))
				{
					this.OnRepetitionCountChanging(value);
					this.SendPropertyChanging();
					this._RepetitionCount = value;
					this.SendPropertyChanged("RepetitionCount");
					this.OnRepetitionCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateTime", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateTime
		{
			get
			{
				return this._UpdateTime;
			}
			set
			{
				if ((this._UpdateTime != value))
				{
					this.OnUpdateTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdateTime = value;
					this.SendPropertyChanged("UpdateTime");
					this.OnUpdateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dat_KeyValueConfig")]
	public partial class Dat_KeyValueConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _KeyName;
		
		private string _KeyValue;
		
		private int _CityId;
		
		private int _WebId;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnKeyNameChanging(string value);
    partial void OnKeyNameChanged();
    partial void OnKeyValueChanging(string value);
    partial void OnKeyValueChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnWebIdChanging(int value);
    partial void OnWebIdChanged();
    #endregion
		
		public Dat_KeyValueConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string KeyName
		{
			get
			{
				return this._KeyName;
			}
			set
			{
				if ((this._KeyName != value))
				{
					this.OnKeyNameChanging(value);
					this.SendPropertyChanging();
					this._KeyName = value;
					this.SendPropertyChanged("KeyName");
					this.OnKeyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyValue", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this.OnKeyValueChanging(value);
					this.SendPropertyChanging();
					this._KeyValue = value;
					this.SendPropertyChanged("KeyValue");
					this.OnKeyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebId", DbType="Int NOT NULL")]
		public int WebId
		{
			get
			{
				return this._WebId;
			}
			set
			{
				if ((this._WebId != value))
				{
					this.OnWebIdChanging(value);
					this.SendPropertyChanging();
					this._WebId = value;
					this.SendPropertyChanged("WebId");
					this.OnWebIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysData_WorkItem")]
	public partial class SysData_WorkItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _WorkName;
		
		private bool _IsExec;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWorkNameChanging(string value);
    partial void OnWorkNameChanged();
    partial void OnIsExecChanging(bool value);
    partial void OnIsExecChanged();
    #endregion
		
		public SysData_WorkItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string WorkName
		{
			get
			{
				return this._WorkName;
			}
			set
			{
				if ((this._WorkName != value))
				{
					this.OnWorkNameChanging(value);
					this.SendPropertyChanging();
					this._WorkName = value;
					this.SendPropertyChanged("WorkName");
					this.OnWorkNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExec", DbType="Bit NOT NULL")]
		public bool IsExec
		{
			get
			{
				return this._IsExec;
			}
			set
			{
				if ((this._IsExec != value))
				{
					this.OnIsExecChanging(value);
					this.SendPropertyChanging();
					this._IsExec = value;
					this.SendPropertyChanged("IsExec");
					this.OnIsExecChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.案例信息")]
	public partial class 案例信息 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _楼盘名;
		
		private System.Nullable<System.DateTime> _案例时间;
		
		private string _行政区;
		
		private string _片区;
		
		private string _楼栋;
		
		private string _房号;
		
		private System.Nullable<decimal> _面积;
		
		private System.Nullable<decimal> _单价;
		
		private System.Nullable<decimal> _总价;
		
		private System.Nullable<int> _所在楼层;
		
		private System.Nullable<int> _总楼层;
		
		private string _装修;
		
		private string _建筑年代;
		
		private string _信息;
		
		private string _电话;
		
		private string _URL;
		
		private string _地址;
		
		private System.Nullable<System.DateTime> _创建时间;
		
		private string _来源;
		
		private string _建筑形式;
		
		private System.Nullable<decimal> _花园面积;
		
		private string _厅结构;
		
		private System.Nullable<int> _车位数量;
		
		private string _配套设施;
		
		private System.Nullable<decimal> _地下室面积;
		
		private int _城市ID;
		
		private System.Nullable<int> _网站ID;
		
		private System.Nullable<int> _案例类型ID;
		
		private System.Nullable<int> _币种ID;
		
		private System.Nullable<int> _朝向ID;
		
		private System.Nullable<int> _户型ID;
		
		private System.Nullable<int> _建筑类型ID;
		
		private System.Nullable<int> _结构ID;
		
		private System.Nullable<int> _用途ID;
		
		private System.Nullable<int> _装修ID;
		
		private int _是否已进行入库整理;
		
		private System.Nullable<System.DateTime> _进行入库整理时间;
		
		private System.Nullable<int> _fxtId;
		
		private System.Nullable<long> _CompanyId;
		
		private System.Nullable<long> _CompanyAreaId;
		
		private System.Nullable<long> _ProjectId;
		
		private System.Nullable<long> _AreaId;
		
		private System.Nullable<long> _SubAreaId;
		
		private EntityRef<城市表> _城市表;
		
		private EntityRef<网站表> _网站表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void On楼盘名Changing(string value);
    partial void On楼盘名Changed();
    partial void On案例时间Changing(System.Nullable<System.DateTime> value);
    partial void On案例时间Changed();
    partial void On行政区Changing(string value);
    partial void On行政区Changed();
    partial void On片区Changing(string value);
    partial void On片区Changed();
    partial void On楼栋Changing(string value);
    partial void On楼栋Changed();
    partial void On房号Changing(string value);
    partial void On房号Changed();
    partial void On面积Changing(System.Nullable<decimal> value);
    partial void On面积Changed();
    partial void On单价Changing(System.Nullable<decimal> value);
    partial void On单价Changed();
    partial void On总价Changing(System.Nullable<decimal> value);
    partial void On总价Changed();
    partial void On所在楼层Changing(System.Nullable<int> value);
    partial void On所在楼层Changed();
    partial void On总楼层Changing(System.Nullable<int> value);
    partial void On总楼层Changed();
    partial void On装修Changing(string value);
    partial void On装修Changed();
    partial void On建筑年代Changing(string value);
    partial void On建筑年代Changed();
    partial void On信息Changing(string value);
    partial void On信息Changed();
    partial void On电话Changing(string value);
    partial void On电话Changed();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void On地址Changing(string value);
    partial void On地址Changed();
    partial void On创建时间Changing(System.Nullable<System.DateTime> value);
    partial void On创建时间Changed();
    partial void On来源Changing(string value);
    partial void On来源Changed();
    partial void On建筑形式Changing(string value);
    partial void On建筑形式Changed();
    partial void On花园面积Changing(System.Nullable<decimal> value);
    partial void On花园面积Changed();
    partial void On厅结构Changing(string value);
    partial void On厅结构Changed();
    partial void On车位数量Changing(System.Nullable<int> value);
    partial void On车位数量Changed();
    partial void On配套设施Changing(string value);
    partial void On配套设施Changed();
    partial void On地下室面积Changing(System.Nullable<decimal> value);
    partial void On地下室面积Changed();
    partial void On城市IDChanging(int value);
    partial void On城市IDChanged();
    partial void On网站IDChanging(System.Nullable<int> value);
    partial void On网站IDChanged();
    partial void On案例类型IDChanging(System.Nullable<int> value);
    partial void On案例类型IDChanged();
    partial void On币种IDChanging(System.Nullable<int> value);
    partial void On币种IDChanged();
    partial void On朝向IDChanging(System.Nullable<int> value);
    partial void On朝向IDChanged();
    partial void On户型IDChanging(System.Nullable<int> value);
    partial void On户型IDChanged();
    partial void On建筑类型IDChanging(System.Nullable<int> value);
    partial void On建筑类型IDChanged();
    partial void On结构IDChanging(System.Nullable<int> value);
    partial void On结构IDChanged();
    partial void On用途IDChanging(System.Nullable<int> value);
    partial void On用途IDChanged();
    partial void On装修IDChanging(System.Nullable<int> value);
    partial void On装修IDChanged();
    partial void On是否已进行入库整理Changing(int value);
    partial void On是否已进行入库整理Changed();
    partial void On进行入库整理时间Changing(System.Nullable<System.DateTime> value);
    partial void On进行入库整理时间Changed();
    partial void OnfxtIdChanging(System.Nullable<int> value);
    partial void OnfxtIdChanged();
    partial void OnCompanyIdChanging(System.Nullable<long> value);
    partial void OnCompanyIdChanged();
    partial void OnCompanyAreaIdChanging(System.Nullable<long> value);
    partial void OnCompanyAreaIdChanged();
    partial void OnProjectIdChanging(System.Nullable<long> value);
    partial void OnProjectIdChanged();
    partial void OnAreaIdChanging(System.Nullable<long> value);
    partial void OnAreaIdChanged();
    partial void OnSubAreaIdChanging(System.Nullable<long> value);
    partial void OnSubAreaIdChanged();
    #endregion
		
		public 案例信息()
		{
			this._城市表 = default(EntityRef<城市表>);
			this._网站表 = default(EntityRef<网站表>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_楼盘名", DbType="VarChar(900)")]
		public string 楼盘名
		{
			get
			{
				return this._楼盘名;
			}
			set
			{
				if ((this._楼盘名 != value))
				{
					this.On楼盘名Changing(value);
					this.SendPropertyChanging();
					this._楼盘名 = value;
					this.SendPropertyChanged("楼盘名");
					this.On楼盘名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_案例时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 案例时间
		{
			get
			{
				return this._案例时间;
			}
			set
			{
				if ((this._案例时间 != value))
				{
					this.On案例时间Changing(value);
					this.SendPropertyChanging();
					this._案例时间 = value;
					this.SendPropertyChanged("案例时间");
					this.On案例时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_行政区", DbType="VarChar(900)")]
		public string 行政区
		{
			get
			{
				return this._行政区;
			}
			set
			{
				if ((this._行政区 != value))
				{
					this.On行政区Changing(value);
					this.SendPropertyChanging();
					this._行政区 = value;
					this.SendPropertyChanged("行政区");
					this.On行政区Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_片区", DbType="VarChar(900)")]
		public string 片区
		{
			get
			{
				return this._片区;
			}
			set
			{
				if ((this._片区 != value))
				{
					this.On片区Changing(value);
					this.SendPropertyChanging();
					this._片区 = value;
					this.SendPropertyChanged("片区");
					this.On片区Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_楼栋", DbType="NVarChar(100)")]
		public string 楼栋
		{
			get
			{
				return this._楼栋;
			}
			set
			{
				if ((this._楼栋 != value))
				{
					this.On楼栋Changing(value);
					this.SendPropertyChanging();
					this._楼栋 = value;
					this.SendPropertyChanged("楼栋");
					this.On楼栋Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_房号", DbType="NVarChar(100)")]
		public string 房号
		{
			get
			{
				return this._房号;
			}
			set
			{
				if ((this._房号 != value))
				{
					this.On房号Changing(value);
					this.SendPropertyChanging();
					this._房号 = value;
					this.SendPropertyChanged("房号");
					this.On房号Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_面积", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 面积
		{
			get
			{
				return this._面积;
			}
			set
			{
				if ((this._面积 != value))
				{
					this.On面积Changing(value);
					this.SendPropertyChanging();
					this._面积 = value;
					this.SendPropertyChanged("面积");
					this.On面积Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_单价", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 单价
		{
			get
			{
				return this._单价;
			}
			set
			{
				if ((this._单价 != value))
				{
					this.On单价Changing(value);
					this.SendPropertyChanging();
					this._单价 = value;
					this.SendPropertyChanged("单价");
					this.On单价Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_总价", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 总价
		{
			get
			{
				return this._总价;
			}
			set
			{
				if ((this._总价 != value))
				{
					this.On总价Changing(value);
					this.SendPropertyChanging();
					this._总价 = value;
					this.SendPropertyChanged("总价");
					this.On总价Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_所在楼层", DbType="Int")]
		public System.Nullable<int> 所在楼层
		{
			get
			{
				return this._所在楼层;
			}
			set
			{
				if ((this._所在楼层 != value))
				{
					this.On所在楼层Changing(value);
					this.SendPropertyChanging();
					this._所在楼层 = value;
					this.SendPropertyChanged("所在楼层");
					this.On所在楼层Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_总楼层", DbType="Int")]
		public System.Nullable<int> 总楼层
		{
			get
			{
				return this._总楼层;
			}
			set
			{
				if ((this._总楼层 != value))
				{
					this.On总楼层Changing(value);
					this.SendPropertyChanging();
					this._总楼层 = value;
					this.SendPropertyChanged("总楼层");
					this.On总楼层Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_装修", DbType="NVarChar(50)")]
		public string 装修
		{
			get
			{
				return this._装修;
			}
			set
			{
				if ((this._装修 != value))
				{
					this.On装修Changing(value);
					this.SendPropertyChanging();
					this._装修 = value;
					this.SendPropertyChanged("装修");
					this.On装修Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_建筑年代", DbType="NVarChar(50)")]
		public string 建筑年代
		{
			get
			{
				return this._建筑年代;
			}
			set
			{
				if ((this._建筑年代 != value))
				{
					this.On建筑年代Changing(value);
					this.SendPropertyChanging();
					this._建筑年代 = value;
					this.SendPropertyChanged("建筑年代");
					this.On建筑年代Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_信息", DbType="NVarChar(500)")]
		public string 信息
		{
			get
			{
				return this._信息;
			}
			set
			{
				if ((this._信息 != value))
				{
					this.On信息Changing(value);
					this.SendPropertyChanging();
					this._信息 = value;
					this.SendPropertyChanged("信息");
					this.On信息Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_电话", DbType="NVarChar(50)")]
		public string 电话
		{
			get
			{
				return this._电话;
			}
			set
			{
				if ((this._电话 != value))
				{
					this.On电话Changing(value);
					this.SendPropertyChanging();
					this._电话 = value;
					this.SendPropertyChanged("电话");
					this.On电话Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(900)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_地址", DbType="NVarChar(500)")]
		public string 地址
		{
			get
			{
				return this._地址;
			}
			set
			{
				if ((this._地址 != value))
				{
					this.On地址Changing(value);
					this.SendPropertyChanging();
					this._地址 = value;
					this.SendPropertyChanged("地址");
					this.On地址Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_创建时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 创建时间
		{
			get
			{
				return this._创建时间;
			}
			set
			{
				if ((this._创建时间 != value))
				{
					this.On创建时间Changing(value);
					this.SendPropertyChanging();
					this._创建时间 = value;
					this.SendPropertyChanged("创建时间");
					this.On创建时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_来源", DbType="NVarChar(50)")]
		public string 来源
		{
			get
			{
				return this._来源;
			}
			set
			{
				if ((this._来源 != value))
				{
					this.On来源Changing(value);
					this.SendPropertyChanging();
					this._来源 = value;
					this.SendPropertyChanged("来源");
					this.On来源Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_建筑形式", DbType="NVarChar(100)")]
		public string 建筑形式
		{
			get
			{
				return this._建筑形式;
			}
			set
			{
				if ((this._建筑形式 != value))
				{
					this.On建筑形式Changing(value);
					this.SendPropertyChanging();
					this._建筑形式 = value;
					this.SendPropertyChanged("建筑形式");
					this.On建筑形式Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_花园面积", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 花园面积
		{
			get
			{
				return this._花园面积;
			}
			set
			{
				if ((this._花园面积 != value))
				{
					this.On花园面积Changing(value);
					this.SendPropertyChanging();
					this._花园面积 = value;
					this.SendPropertyChanged("花园面积");
					this.On花园面积Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_厅结构", DbType="NVarChar(100)")]
		public string 厅结构
		{
			get
			{
				return this._厅结构;
			}
			set
			{
				if ((this._厅结构 != value))
				{
					this.On厅结构Changing(value);
					this.SendPropertyChanging();
					this._厅结构 = value;
					this.SendPropertyChanged("厅结构");
					this.On厅结构Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_车位数量", DbType="Int")]
		public System.Nullable<int> 车位数量
		{
			get
			{
				return this._车位数量;
			}
			set
			{
				if ((this._车位数量 != value))
				{
					this.On车位数量Changing(value);
					this.SendPropertyChanging();
					this._车位数量 = value;
					this.SendPropertyChanged("车位数量");
					this.On车位数量Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_配套设施", DbType="NVarChar(200)")]
		public string 配套设施
		{
			get
			{
				return this._配套设施;
			}
			set
			{
				if ((this._配套设施 != value))
				{
					this.On配套设施Changing(value);
					this.SendPropertyChanging();
					this._配套设施 = value;
					this.SendPropertyChanged("配套设施");
					this.On配套设施Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_地下室面积", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 地下室面积
		{
			get
			{
				return this._地下室面积;
			}
			set
			{
				if ((this._地下室面积 != value))
				{
					this.On地下室面积Changing(value);
					this.SendPropertyChanging();
					this._地下室面积 = value;
					this.SendPropertyChanged("地下室面积");
					this.On地下室面积Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市ID", DbType="Int NOT NULL")]
		public int 城市ID
		{
			get
			{
				return this._城市ID;
			}
			set
			{
				if ((this._城市ID != value))
				{
					if (this._城市表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On城市IDChanging(value);
					this.SendPropertyChanging();
					this._城市ID = value;
					this.SendPropertyChanged("城市ID");
					this.On城市IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站ID", DbType="Int")]
		public System.Nullable<int> 网站ID
		{
			get
			{
				return this._网站ID;
			}
			set
			{
				if ((this._网站ID != value))
				{
					if (this._网站表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On网站IDChanging(value);
					this.SendPropertyChanging();
					this._网站ID = value;
					this.SendPropertyChanged("网站ID");
					this.On网站IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_案例类型ID", DbType="Int")]
		public System.Nullable<int> 案例类型ID
		{
			get
			{
				return this._案例类型ID;
			}
			set
			{
				if ((this._案例类型ID != value))
				{
					this.On案例类型IDChanging(value);
					this.SendPropertyChanging();
					this._案例类型ID = value;
					this.SendPropertyChanged("案例类型ID");
					this.On案例类型IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_币种ID", DbType="Int")]
		public System.Nullable<int> 币种ID
		{
			get
			{
				return this._币种ID;
			}
			set
			{
				if ((this._币种ID != value))
				{
					this.On币种IDChanging(value);
					this.SendPropertyChanging();
					this._币种ID = value;
					this.SendPropertyChanged("币种ID");
					this.On币种IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_朝向ID", DbType="Int")]
		public System.Nullable<int> 朝向ID
		{
			get
			{
				return this._朝向ID;
			}
			set
			{
				if ((this._朝向ID != value))
				{
					this.On朝向IDChanging(value);
					this.SendPropertyChanging();
					this._朝向ID = value;
					this.SendPropertyChanged("朝向ID");
					this.On朝向IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_户型ID", DbType="Int")]
		public System.Nullable<int> 户型ID
		{
			get
			{
				return this._户型ID;
			}
			set
			{
				if ((this._户型ID != value))
				{
					this.On户型IDChanging(value);
					this.SendPropertyChanging();
					this._户型ID = value;
					this.SendPropertyChanged("户型ID");
					this.On户型IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_建筑类型ID", DbType="Int")]
		public System.Nullable<int> 建筑类型ID
		{
			get
			{
				return this._建筑类型ID;
			}
			set
			{
				if ((this._建筑类型ID != value))
				{
					this.On建筑类型IDChanging(value);
					this.SendPropertyChanging();
					this._建筑类型ID = value;
					this.SendPropertyChanged("建筑类型ID");
					this.On建筑类型IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_结构ID", DbType="Int")]
		public System.Nullable<int> 结构ID
		{
			get
			{
				return this._结构ID;
			}
			set
			{
				if ((this._结构ID != value))
				{
					this.On结构IDChanging(value);
					this.SendPropertyChanging();
					this._结构ID = value;
					this.SendPropertyChanged("结构ID");
					this.On结构IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用途ID", DbType="Int")]
		public System.Nullable<int> 用途ID
		{
			get
			{
				return this._用途ID;
			}
			set
			{
				if ((this._用途ID != value))
				{
					this.On用途IDChanging(value);
					this.SendPropertyChanging();
					this._用途ID = value;
					this.SendPropertyChanged("用途ID");
					this.On用途IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_装修ID", DbType="Int")]
		public System.Nullable<int> 装修ID
		{
			get
			{
				return this._装修ID;
			}
			set
			{
				if ((this._装修ID != value))
				{
					this.On装修IDChanging(value);
					this.SendPropertyChanging();
					this._装修ID = value;
					this.SendPropertyChanged("装修ID");
					this.On装修IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_是否已进行入库整理", DbType="Int NOT NULL")]
		public int 是否已进行入库整理
		{
			get
			{
				return this._是否已进行入库整理;
			}
			set
			{
				if ((this._是否已进行入库整理 != value))
				{
					this.On是否已进行入库整理Changing(value);
					this.SendPropertyChanging();
					this._是否已进行入库整理 = value;
					this.SendPropertyChanged("是否已进行入库整理");
					this.On是否已进行入库整理Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_进行入库整理时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 进行入库整理时间
		{
			get
			{
				return this._进行入库整理时间;
			}
			set
			{
				if ((this._进行入库整理时间 != value))
				{
					this.On进行入库整理时间Changing(value);
					this.SendPropertyChanging();
					this._进行入库整理时间 = value;
					this.SendPropertyChanged("进行入库整理时间");
					this.On进行入库整理时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fxtId", DbType="Int")]
		public System.Nullable<int> fxtId
		{
			get
			{
				return this._fxtId;
			}
			set
			{
				if ((this._fxtId != value))
				{
					this.OnfxtIdChanging(value);
					this.SendPropertyChanging();
					this._fxtId = value;
					this.SendPropertyChanged("fxtId");
					this.OnfxtIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAreaId", DbType="BigInt")]
		public System.Nullable<long> CompanyAreaId
		{
			get
			{
				return this._CompanyAreaId;
			}
			set
			{
				if ((this._CompanyAreaId != value))
				{
					this.OnCompanyAreaIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyAreaId = value;
					this.SendPropertyChanged("CompanyAreaId");
					this.OnCompanyAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt")]
		public System.Nullable<long> ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaId", DbType="BigInt")]
		public System.Nullable<long> AreaId
		{
			get
			{
				return this._AreaId;
			}
			set
			{
				if ((this._AreaId != value))
				{
					this.OnAreaIdChanging(value);
					this.SendPropertyChanging();
					this._AreaId = value;
					this.SendPropertyChanged("AreaId");
					this.OnAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubAreaId", DbType="BigInt")]
		public System.Nullable<long> SubAreaId
		{
			get
			{
				return this._SubAreaId;
			}
			set
			{
				if ((this._SubAreaId != value))
				{
					this.OnSubAreaIdChanging(value);
					this.SendPropertyChanging();
					this._SubAreaId = value;
					this.SendPropertyChanged("SubAreaId");
					this.OnSubAreaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_案例信息", Storage="_城市表", ThisKey="城市ID", OtherKey="ID", IsForeignKey=true)]
		public 城市表 城市表
		{
			get
			{
				return this._城市表.Entity;
			}
			set
			{
				城市表 previousValue = this._城市表.Entity;
				if (((previousValue != value) 
							|| (this._城市表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._城市表.Entity = null;
						previousValue.案例信息.Remove(this);
					}
					this._城市表.Entity = value;
					if ((value != null))
					{
						value.案例信息.Add(this);
						this._城市ID = value.ID;
					}
					else
					{
						this._城市ID = default(int);
					}
					this.SendPropertyChanged("城市表");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="网站表_案例信息", Storage="_网站表", ThisKey="网站ID", OtherKey="ID", IsForeignKey=true)]
		public 网站表 网站表
		{
			get
			{
				return this._网站表.Entity;
			}
			set
			{
				网站表 previousValue = this._网站表.Entity;
				if (((previousValue != value) 
							|| (this._网站表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._网站表.Entity = null;
						previousValue.案例信息.Remove(this);
					}
					this._网站表.Entity = value;
					if ((value != null))
					{
						value.案例信息.Add(this);
						this._网站ID = value.ID;
					}
					else
					{
						this._网站ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("网站表");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VIEW_案例信息_城市表_网站表")]
	public partial class VIEW_案例信息_城市表_网站表
	{
		
		private long _ID;
		
		private string _楼盘名;
		
		private System.Nullable<System.DateTime> _案例时间;
		
		private string _行政区;
		
		private string _片区;
		
		private string _楼栋;
		
		private string _房号;
		
		private System.Nullable<decimal> _面积;
		
		private System.Nullable<decimal> _单价;
		
		private System.Nullable<decimal> _总价;
		
		private System.Nullable<int> _所在楼层;
		
		private System.Nullable<int> _总楼层;
		
		private string _装修;
		
		private string _建筑年代;
		
		private string _信息;
		
		private string _电话;
		
		private string _URL;
		
		private string _地址;
		
		private System.Nullable<System.DateTime> _创建时间;
		
		private string _来源;
		
		private string _建筑形式;
		
		private System.Nullable<decimal> _花园面积;
		
		private string _厅结构;
		
		private System.Nullable<int> _车位数量;
		
		private string _配套设施;
		
		private System.Nullable<decimal> _地下室面积;
		
		private int _城市ID;
		
		private System.Nullable<int> _网站ID;
		
		private System.Nullable<int> _案例类型ID;
		
		private System.Nullable<int> _币种ID;
		
		private System.Nullable<int> _朝向ID;
		
		private System.Nullable<int> _户型ID;
		
		private System.Nullable<int> _建筑类型ID;
		
		private System.Nullable<int> _结构ID;
		
		private System.Nullable<int> _用途ID;
		
		private System.Nullable<int> _装修ID;
		
		private int _是否已进行入库整理;
		
		private System.Nullable<System.DateTime> _进行入库整理时间;
		
		private System.Nullable<int> _fxtId;
		
		private System.Nullable<long> _CompanyId;
		
		private System.Nullable<long> _CompanyAreaId;
		
		private System.Nullable<long> _ProjectId;
		
		private System.Nullable<long> _AreaId;
		
		private System.Nullable<long> _SubAreaId;
		
		private string _网站;
		
		private string _城市;
		
		private string _SysData案例类型;
		
		private string _SysData币种;
		
		private string _SysData朝向;
		
		private string _SysData户型;
		
		private string _SysData建筑类型;
		
		private string _SysData结构;
		
		private string _SysData用途;
		
		private string _SysData装修;
		
		private decimal _动态排序字段;
		
		private string _ProjectName;
		
		private string _AreaName;
		
		private string _SubAreaName;
		
		public VIEW_案例信息_城市表_网站表()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_楼盘名", DbType="VarChar(900)")]
		public string 楼盘名
		{
			get
			{
				return this._楼盘名;
			}
			set
			{
				if ((this._楼盘名 != value))
				{
					this._楼盘名 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_案例时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 案例时间
		{
			get
			{
				return this._案例时间;
			}
			set
			{
				if ((this._案例时间 != value))
				{
					this._案例时间 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_行政区", DbType="VarChar(900)")]
		public string 行政区
		{
			get
			{
				return this._行政区;
			}
			set
			{
				if ((this._行政区 != value))
				{
					this._行政区 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_片区", DbType="VarChar(900)")]
		public string 片区
		{
			get
			{
				return this._片区;
			}
			set
			{
				if ((this._片区 != value))
				{
					this._片区 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_楼栋", DbType="NVarChar(100)")]
		public string 楼栋
		{
			get
			{
				return this._楼栋;
			}
			set
			{
				if ((this._楼栋 != value))
				{
					this._楼栋 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_房号", DbType="NVarChar(100)")]
		public string 房号
		{
			get
			{
				return this._房号;
			}
			set
			{
				if ((this._房号 != value))
				{
					this._房号 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_面积", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 面积
		{
			get
			{
				return this._面积;
			}
			set
			{
				if ((this._面积 != value))
				{
					this._面积 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_单价", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 单价
		{
			get
			{
				return this._单价;
			}
			set
			{
				if ((this._单价 != value))
				{
					this._单价 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_总价", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 总价
		{
			get
			{
				return this._总价;
			}
			set
			{
				if ((this._总价 != value))
				{
					this._总价 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_所在楼层", DbType="Int")]
		public System.Nullable<int> 所在楼层
		{
			get
			{
				return this._所在楼层;
			}
			set
			{
				if ((this._所在楼层 != value))
				{
					this._所在楼层 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_总楼层", DbType="Int")]
		public System.Nullable<int> 总楼层
		{
			get
			{
				return this._总楼层;
			}
			set
			{
				if ((this._总楼层 != value))
				{
					this._总楼层 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_装修", DbType="NVarChar(50)")]
		public string 装修
		{
			get
			{
				return this._装修;
			}
			set
			{
				if ((this._装修 != value))
				{
					this._装修 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_建筑年代", DbType="NVarChar(50)")]
		public string 建筑年代
		{
			get
			{
				return this._建筑年代;
			}
			set
			{
				if ((this._建筑年代 != value))
				{
					this._建筑年代 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_信息", DbType="NVarChar(500)")]
		public string 信息
		{
			get
			{
				return this._信息;
			}
			set
			{
				if ((this._信息 != value))
				{
					this._信息 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_电话", DbType="NVarChar(50)")]
		public string 电话
		{
			get
			{
				return this._电话;
			}
			set
			{
				if ((this._电话 != value))
				{
					this._电话 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(900)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this._URL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_地址", DbType="NVarChar(500)")]
		public string 地址
		{
			get
			{
				return this._地址;
			}
			set
			{
				if ((this._地址 != value))
				{
					this._地址 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_创建时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 创建时间
		{
			get
			{
				return this._创建时间;
			}
			set
			{
				if ((this._创建时间 != value))
				{
					this._创建时间 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_来源", DbType="NVarChar(50)")]
		public string 来源
		{
			get
			{
				return this._来源;
			}
			set
			{
				if ((this._来源 != value))
				{
					this._来源 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_建筑形式", DbType="NVarChar(100)")]
		public string 建筑形式
		{
			get
			{
				return this._建筑形式;
			}
			set
			{
				if ((this._建筑形式 != value))
				{
					this._建筑形式 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_花园面积", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 花园面积
		{
			get
			{
				return this._花园面积;
			}
			set
			{
				if ((this._花园面积 != value))
				{
					this._花园面积 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_厅结构", DbType="NVarChar(100)")]
		public string 厅结构
		{
			get
			{
				return this._厅结构;
			}
			set
			{
				if ((this._厅结构 != value))
				{
					this._厅结构 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_车位数量", DbType="Int")]
		public System.Nullable<int> 车位数量
		{
			get
			{
				return this._车位数量;
			}
			set
			{
				if ((this._车位数量 != value))
				{
					this._车位数量 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_配套设施", DbType="NVarChar(200)")]
		public string 配套设施
		{
			get
			{
				return this._配套设施;
			}
			set
			{
				if ((this._配套设施 != value))
				{
					this._配套设施 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_地下室面积", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 地下室面积
		{
			get
			{
				return this._地下室面积;
			}
			set
			{
				if ((this._地下室面积 != value))
				{
					this._地下室面积 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市ID", DbType="Int NOT NULL")]
		public int 城市ID
		{
			get
			{
				return this._城市ID;
			}
			set
			{
				if ((this._城市ID != value))
				{
					this._城市ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站ID", DbType="Int")]
		public System.Nullable<int> 网站ID
		{
			get
			{
				return this._网站ID;
			}
			set
			{
				if ((this._网站ID != value))
				{
					this._网站ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_案例类型ID", DbType="Int")]
		public System.Nullable<int> 案例类型ID
		{
			get
			{
				return this._案例类型ID;
			}
			set
			{
				if ((this._案例类型ID != value))
				{
					this._案例类型ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_币种ID", DbType="Int")]
		public System.Nullable<int> 币种ID
		{
			get
			{
				return this._币种ID;
			}
			set
			{
				if ((this._币种ID != value))
				{
					this._币种ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_朝向ID", DbType="Int")]
		public System.Nullable<int> 朝向ID
		{
			get
			{
				return this._朝向ID;
			}
			set
			{
				if ((this._朝向ID != value))
				{
					this._朝向ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_户型ID", DbType="Int")]
		public System.Nullable<int> 户型ID
		{
			get
			{
				return this._户型ID;
			}
			set
			{
				if ((this._户型ID != value))
				{
					this._户型ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_建筑类型ID", DbType="Int")]
		public System.Nullable<int> 建筑类型ID
		{
			get
			{
				return this._建筑类型ID;
			}
			set
			{
				if ((this._建筑类型ID != value))
				{
					this._建筑类型ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_结构ID", DbType="Int")]
		public System.Nullable<int> 结构ID
		{
			get
			{
				return this._结构ID;
			}
			set
			{
				if ((this._结构ID != value))
				{
					this._结构ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用途ID", DbType="Int")]
		public System.Nullable<int> 用途ID
		{
			get
			{
				return this._用途ID;
			}
			set
			{
				if ((this._用途ID != value))
				{
					this._用途ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_装修ID", DbType="Int")]
		public System.Nullable<int> 装修ID
		{
			get
			{
				return this._装修ID;
			}
			set
			{
				if ((this._装修ID != value))
				{
					this._装修ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_是否已进行入库整理", DbType="Int NOT NULL")]
		public int 是否已进行入库整理
		{
			get
			{
				return this._是否已进行入库整理;
			}
			set
			{
				if ((this._是否已进行入库整理 != value))
				{
					this._是否已进行入库整理 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_进行入库整理时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 进行入库整理时间
		{
			get
			{
				return this._进行入库整理时间;
			}
			set
			{
				if ((this._进行入库整理时间 != value))
				{
					this._进行入库整理时间 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fxtId", DbType="Int")]
		public System.Nullable<int> fxtId
		{
			get
			{
				return this._fxtId;
			}
			set
			{
				if ((this._fxtId != value))
				{
					this._fxtId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this._CompanyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAreaId", DbType="BigInt")]
		public System.Nullable<long> CompanyAreaId
		{
			get
			{
				return this._CompanyAreaId;
			}
			set
			{
				if ((this._CompanyAreaId != value))
				{
					this._CompanyAreaId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt")]
		public System.Nullable<long> ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this._ProjectId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaId", DbType="BigInt")]
		public System.Nullable<long> AreaId
		{
			get
			{
				return this._AreaId;
			}
			set
			{
				if ((this._AreaId != value))
				{
					this._AreaId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubAreaId", DbType="BigInt")]
		public System.Nullable<long> SubAreaId
		{
			get
			{
				return this._SubAreaId;
			}
			set
			{
				if ((this._SubAreaId != value))
				{
					this._SubAreaId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站", DbType="NVarChar(500)")]
		public string 网站
		{
			get
			{
				return this._网站;
			}
			set
			{
				if ((this._网站 != value))
				{
					this._网站 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市", DbType="NVarChar(500)")]
		public string 城市
		{
			get
			{
				return this._城市;
			}
			set
			{
				if ((this._城市 != value))
				{
					this._城市 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData案例类型", DbType="NVarChar(50)")]
		public string SysData案例类型
		{
			get
			{
				return this._SysData案例类型;
			}
			set
			{
				if ((this._SysData案例类型 != value))
				{
					this._SysData案例类型 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData币种", DbType="VarChar(50)")]
		public string SysData币种
		{
			get
			{
				return this._SysData币种;
			}
			set
			{
				if ((this._SysData币种 != value))
				{
					this._SysData币种 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData朝向", DbType="VarChar(800)")]
		public string SysData朝向
		{
			get
			{
				return this._SysData朝向;
			}
			set
			{
				if ((this._SysData朝向 != value))
				{
					this._SysData朝向 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData户型", DbType="VarChar(800)")]
		public string SysData户型
		{
			get
			{
				return this._SysData户型;
			}
			set
			{
				if ((this._SysData户型 != value))
				{
					this._SysData户型 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData建筑类型", DbType="VarChar(800)")]
		public string SysData建筑类型
		{
			get
			{
				return this._SysData建筑类型;
			}
			set
			{
				if ((this._SysData建筑类型 != value))
				{
					this._SysData建筑类型 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData结构", DbType="VarChar(50)")]
		public string SysData结构
		{
			get
			{
				return this._SysData结构;
			}
			set
			{
				if ((this._SysData结构 != value))
				{
					this._SysData结构 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData用途", DbType="VarChar(50)")]
		public string SysData用途
		{
			get
			{
				return this._SysData用途;
			}
			set
			{
				if ((this._SysData用途 != value))
				{
					this._SysData用途 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData装修", DbType="VarChar(800)")]
		public string SysData装修
		{
			get
			{
				return this._SysData装修;
			}
			set
			{
				if ((this._SysData装修 != value))
				{
					this._SysData装修 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_动态排序字段", DbType="Decimal(15,6) NOT NULL")]
		public decimal 动态排序字段
		{
			get
			{
				return this._动态排序字段;
			}
			set
			{
				if ((this._动态排序字段 != value))
				{
					this._动态排序字段 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(900)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaName", DbType="VarChar(800)")]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this._AreaName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubAreaName", DbType="VarChar(800)")]
		public string SubAreaName
		{
			get
			{
				return this._SubAreaName;
			}
			set
			{
				if ((this._SubAreaName != value))
				{
					this._SubAreaName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VIEW_案例信息_城市表_网站表2")]
	public partial class VIEW_案例信息_城市表_网站表2
	{
		
		private long _ID;
		
		private string _楼盘名;
		
		private System.Nullable<System.DateTime> _案例时间;
		
		private string _行政区;
		
		private string _片区;
		
		private string _楼栋;
		
		private string _房号;
		
		private System.Nullable<decimal> _面积;
		
		private System.Nullable<decimal> _单价;
		
		private System.Nullable<decimal> _总价;
		
		private System.Nullable<int> _所在楼层;
		
		private System.Nullable<int> _总楼层;
		
		private string _装修;
		
		private string _建筑年代;
		
		private string _信息;
		
		private string _电话;
		
		private string _URL;
		
		private string _地址;
		
		private System.Nullable<System.DateTime> _创建时间;
		
		private string _来源;
		
		private string _建筑形式;
		
		private System.Nullable<decimal> _花园面积;
		
		private string _厅结构;
		
		private System.Nullable<int> _车位数量;
		
		private string _配套设施;
		
		private System.Nullable<decimal> _地下室面积;
		
		private int _城市ID;
		
		private System.Nullable<int> _网站ID;
		
		private System.Nullable<int> _案例类型ID;
		
		private System.Nullable<int> _币种ID;
		
		private System.Nullable<int> _朝向ID;
		
		private System.Nullable<int> _户型ID;
		
		private System.Nullable<int> _建筑类型ID;
		
		private System.Nullable<int> _结构ID;
		
		private System.Nullable<int> _用途ID;
		
		private System.Nullable<int> _装修ID;
		
		private int _是否已进行入库整理;
		
		private System.Nullable<System.DateTime> _进行入库整理时间;
		
		private System.Nullable<int> _fxtId;
		
		private System.Nullable<long> _CompanyId;
		
		private System.Nullable<long> _CompanyAreaId;
		
		private System.Nullable<long> _ProjectId;
		
		private System.Nullable<long> _AreaId;
		
		private System.Nullable<long> _SubAreaId;
		
		private string _网站;
		
		private string _城市;
		
		private string _SysData案例类型;
		
		private string _SysData币种;
		
		private string _SysData朝向;
		
		private string _SysData户型;
		
		private string _SysData建筑类型;
		
		private string _SysData结构;
		
		private string _SysData用途;
		
		private string _SysData装修;
		
		private decimal _动态排序字段;
		
		private string _ProjectName;
		
		private string _AreaName;
		
		private string _SubAreaName;
		
		private System.Nullable<int> _NotImportCaseCount;
		
		public VIEW_案例信息_城市表_网站表2()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_楼盘名", DbType="VarChar(900)")]
		public string 楼盘名
		{
			get
			{
				return this._楼盘名;
			}
			set
			{
				if ((this._楼盘名 != value))
				{
					this._楼盘名 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_案例时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 案例时间
		{
			get
			{
				return this._案例时间;
			}
			set
			{
				if ((this._案例时间 != value))
				{
					this._案例时间 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_行政区", DbType="VarChar(900)")]
		public string 行政区
		{
			get
			{
				return this._行政区;
			}
			set
			{
				if ((this._行政区 != value))
				{
					this._行政区 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_片区", DbType="VarChar(900)")]
		public string 片区
		{
			get
			{
				return this._片区;
			}
			set
			{
				if ((this._片区 != value))
				{
					this._片区 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_楼栋", DbType="NVarChar(100)")]
		public string 楼栋
		{
			get
			{
				return this._楼栋;
			}
			set
			{
				if ((this._楼栋 != value))
				{
					this._楼栋 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_房号", DbType="NVarChar(100)")]
		public string 房号
		{
			get
			{
				return this._房号;
			}
			set
			{
				if ((this._房号 != value))
				{
					this._房号 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_面积", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 面积
		{
			get
			{
				return this._面积;
			}
			set
			{
				if ((this._面积 != value))
				{
					this._面积 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_单价", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 单价
		{
			get
			{
				return this._单价;
			}
			set
			{
				if ((this._单价 != value))
				{
					this._单价 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_总价", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 总价
		{
			get
			{
				return this._总价;
			}
			set
			{
				if ((this._总价 != value))
				{
					this._总价 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_所在楼层", DbType="Int")]
		public System.Nullable<int> 所在楼层
		{
			get
			{
				return this._所在楼层;
			}
			set
			{
				if ((this._所在楼层 != value))
				{
					this._所在楼层 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_总楼层", DbType="Int")]
		public System.Nullable<int> 总楼层
		{
			get
			{
				return this._总楼层;
			}
			set
			{
				if ((this._总楼层 != value))
				{
					this._总楼层 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_装修", DbType="NVarChar(50)")]
		public string 装修
		{
			get
			{
				return this._装修;
			}
			set
			{
				if ((this._装修 != value))
				{
					this._装修 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_建筑年代", DbType="NVarChar(50)")]
		public string 建筑年代
		{
			get
			{
				return this._建筑年代;
			}
			set
			{
				if ((this._建筑年代 != value))
				{
					this._建筑年代 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_信息", DbType="NVarChar(500)")]
		public string 信息
		{
			get
			{
				return this._信息;
			}
			set
			{
				if ((this._信息 != value))
				{
					this._信息 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_电话", DbType="NVarChar(50)")]
		public string 电话
		{
			get
			{
				return this._电话;
			}
			set
			{
				if ((this._电话 != value))
				{
					this._电话 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(900)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this._URL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_地址", DbType="NVarChar(500)")]
		public string 地址
		{
			get
			{
				return this._地址;
			}
			set
			{
				if ((this._地址 != value))
				{
					this._地址 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_创建时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 创建时间
		{
			get
			{
				return this._创建时间;
			}
			set
			{
				if ((this._创建时间 != value))
				{
					this._创建时间 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_来源", DbType="NVarChar(50)")]
		public string 来源
		{
			get
			{
				return this._来源;
			}
			set
			{
				if ((this._来源 != value))
				{
					this._来源 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_建筑形式", DbType="NVarChar(100)")]
		public string 建筑形式
		{
			get
			{
				return this._建筑形式;
			}
			set
			{
				if ((this._建筑形式 != value))
				{
					this._建筑形式 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_花园面积", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 花园面积
		{
			get
			{
				return this._花园面积;
			}
			set
			{
				if ((this._花园面积 != value))
				{
					this._花园面积 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_厅结构", DbType="NVarChar(100)")]
		public string 厅结构
		{
			get
			{
				return this._厅结构;
			}
			set
			{
				if ((this._厅结构 != value))
				{
					this._厅结构 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_车位数量", DbType="Int")]
		public System.Nullable<int> 车位数量
		{
			get
			{
				return this._车位数量;
			}
			set
			{
				if ((this._车位数量 != value))
				{
					this._车位数量 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_配套设施", DbType="NVarChar(200)")]
		public string 配套设施
		{
			get
			{
				return this._配套设施;
			}
			set
			{
				if ((this._配套设施 != value))
				{
					this._配套设施 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_地下室面积", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> 地下室面积
		{
			get
			{
				return this._地下室面积;
			}
			set
			{
				if ((this._地下室面积 != value))
				{
					this._地下室面积 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市ID", DbType="Int NOT NULL")]
		public int 城市ID
		{
			get
			{
				return this._城市ID;
			}
			set
			{
				if ((this._城市ID != value))
				{
					this._城市ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站ID", DbType="Int")]
		public System.Nullable<int> 网站ID
		{
			get
			{
				return this._网站ID;
			}
			set
			{
				if ((this._网站ID != value))
				{
					this._网站ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_案例类型ID", DbType="Int")]
		public System.Nullable<int> 案例类型ID
		{
			get
			{
				return this._案例类型ID;
			}
			set
			{
				if ((this._案例类型ID != value))
				{
					this._案例类型ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_币种ID", DbType="Int")]
		public System.Nullable<int> 币种ID
		{
			get
			{
				return this._币种ID;
			}
			set
			{
				if ((this._币种ID != value))
				{
					this._币种ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_朝向ID", DbType="Int")]
		public System.Nullable<int> 朝向ID
		{
			get
			{
				return this._朝向ID;
			}
			set
			{
				if ((this._朝向ID != value))
				{
					this._朝向ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_户型ID", DbType="Int")]
		public System.Nullable<int> 户型ID
		{
			get
			{
				return this._户型ID;
			}
			set
			{
				if ((this._户型ID != value))
				{
					this._户型ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_建筑类型ID", DbType="Int")]
		public System.Nullable<int> 建筑类型ID
		{
			get
			{
				return this._建筑类型ID;
			}
			set
			{
				if ((this._建筑类型ID != value))
				{
					this._建筑类型ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_结构ID", DbType="Int")]
		public System.Nullable<int> 结构ID
		{
			get
			{
				return this._结构ID;
			}
			set
			{
				if ((this._结构ID != value))
				{
					this._结构ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用途ID", DbType="Int")]
		public System.Nullable<int> 用途ID
		{
			get
			{
				return this._用途ID;
			}
			set
			{
				if ((this._用途ID != value))
				{
					this._用途ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_装修ID", DbType="Int")]
		public System.Nullable<int> 装修ID
		{
			get
			{
				return this._装修ID;
			}
			set
			{
				if ((this._装修ID != value))
				{
					this._装修ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_是否已进行入库整理", DbType="Int NOT NULL")]
		public int 是否已进行入库整理
		{
			get
			{
				return this._是否已进行入库整理;
			}
			set
			{
				if ((this._是否已进行入库整理 != value))
				{
					this._是否已进行入库整理 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_进行入库整理时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 进行入库整理时间
		{
			get
			{
				return this._进行入库整理时间;
			}
			set
			{
				if ((this._进行入库整理时间 != value))
				{
					this._进行入库整理时间 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fxtId", DbType="Int")]
		public System.Nullable<int> fxtId
		{
			get
			{
				return this._fxtId;
			}
			set
			{
				if ((this._fxtId != value))
				{
					this._fxtId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="BigInt")]
		public System.Nullable<long> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this._CompanyId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyAreaId", DbType="BigInt")]
		public System.Nullable<long> CompanyAreaId
		{
			get
			{
				return this._CompanyAreaId;
			}
			set
			{
				if ((this._CompanyAreaId != value))
				{
					this._CompanyAreaId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="BigInt")]
		public System.Nullable<long> ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this._ProjectId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaId", DbType="BigInt")]
		public System.Nullable<long> AreaId
		{
			get
			{
				return this._AreaId;
			}
			set
			{
				if ((this._AreaId != value))
				{
					this._AreaId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubAreaId", DbType="BigInt")]
		public System.Nullable<long> SubAreaId
		{
			get
			{
				return this._SubAreaId;
			}
			set
			{
				if ((this._SubAreaId != value))
				{
					this._SubAreaId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站", DbType="NVarChar(500)")]
		public string 网站
		{
			get
			{
				return this._网站;
			}
			set
			{
				if ((this._网站 != value))
				{
					this._网站 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市", DbType="NVarChar(500)")]
		public string 城市
		{
			get
			{
				return this._城市;
			}
			set
			{
				if ((this._城市 != value))
				{
					this._城市 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData案例类型", DbType="NVarChar(50)")]
		public string SysData案例类型
		{
			get
			{
				return this._SysData案例类型;
			}
			set
			{
				if ((this._SysData案例类型 != value))
				{
					this._SysData案例类型 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData币种", DbType="VarChar(50)")]
		public string SysData币种
		{
			get
			{
				return this._SysData币种;
			}
			set
			{
				if ((this._SysData币种 != value))
				{
					this._SysData币种 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData朝向", DbType="VarChar(800)")]
		public string SysData朝向
		{
			get
			{
				return this._SysData朝向;
			}
			set
			{
				if ((this._SysData朝向 != value))
				{
					this._SysData朝向 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData户型", DbType="VarChar(800)")]
		public string SysData户型
		{
			get
			{
				return this._SysData户型;
			}
			set
			{
				if ((this._SysData户型 != value))
				{
					this._SysData户型 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData建筑类型", DbType="VarChar(800)")]
		public string SysData建筑类型
		{
			get
			{
				return this._SysData建筑类型;
			}
			set
			{
				if ((this._SysData建筑类型 != value))
				{
					this._SysData建筑类型 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData结构", DbType="VarChar(50)")]
		public string SysData结构
		{
			get
			{
				return this._SysData结构;
			}
			set
			{
				if ((this._SysData结构 != value))
				{
					this._SysData结构 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData用途", DbType="VarChar(50)")]
		public string SysData用途
		{
			get
			{
				return this._SysData用途;
			}
			set
			{
				if ((this._SysData用途 != value))
				{
					this._SysData用途 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysData装修", DbType="VarChar(800)")]
		public string SysData装修
		{
			get
			{
				return this._SysData装修;
			}
			set
			{
				if ((this._SysData装修 != value))
				{
					this._SysData装修 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_动态排序字段", DbType="Decimal(15,6) NOT NULL")]
		public decimal 动态排序字段
		{
			get
			{
				return this._动态排序字段;
			}
			set
			{
				if ((this._动态排序字段 != value))
				{
					this._动态排序字段 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(900)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaName", DbType="VarChar(800)")]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this._AreaName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubAreaName", DbType="VarChar(800)")]
		public string SubAreaName
		{
			get
			{
				return this._SubAreaName;
			}
			set
			{
				if ((this._SubAreaName != value))
				{
					this._SubAreaName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotImportCaseCount", DbType="Int")]
		public System.Nullable<int> NotImportCaseCount
		{
			get
			{
				return this._NotImportCaseCount;
			}
			set
			{
				if ((this._NotImportCaseCount != value))
				{
					this._NotImportCaseCount = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.网站爬取配置")]
	public partial class 网站爬取配置 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private int _网站ID;
		
		private int _城市ID;
		
		private string _域名;
		
		private string _列表页链接;
		
		private string _列表页分页参数链接;
		
		private int _详细页面爬取频率;
		
		private int _列表页面爬取频率;
		
		private System.Nullable<int> _规则编号;
		
		private System.Nullable<int> _主要用途;
		
		private System.Nullable<int> _主要案例类型;
		
		private EntityRef<城市表> _城市表;
		
		private EntityRef<网站表> _网站表;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void On网站IDChanging(int value);
    partial void On网站IDChanged();
    partial void On城市IDChanging(int value);
    partial void On城市IDChanged();
    partial void On域名Changing(string value);
    partial void On域名Changed();
    partial void On列表页链接Changing(string value);
    partial void On列表页链接Changed();
    partial void On列表页分页参数链接Changing(string value);
    partial void On列表页分页参数链接Changed();
    partial void On详细页面爬取频率Changing(int value);
    partial void On详细页面爬取频率Changed();
    partial void On列表页面爬取频率Changing(int value);
    partial void On列表页面爬取频率Changed();
    partial void On规则编号Changing(System.Nullable<int> value);
    partial void On规则编号Changed();
    partial void On主要用途Changing(System.Nullable<int> value);
    partial void On主要用途Changed();
    partial void On主要案例类型Changing(System.Nullable<int> value);
    partial void On主要案例类型Changed();
    #endregion
		
		public 网站爬取配置()
		{
			this._城市表 = default(EntityRef<城市表>);
			this._网站表 = default(EntityRef<网站表>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站ID", DbType="Int NOT NULL")]
		public int 网站ID
		{
			get
			{
				return this._网站ID;
			}
			set
			{
				if ((this._网站ID != value))
				{
					if (this._网站表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On网站IDChanging(value);
					this.SendPropertyChanging();
					this._网站ID = value;
					this.SendPropertyChanged("网站ID");
					this.On网站IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市ID", DbType="Int NOT NULL")]
		public int 城市ID
		{
			get
			{
				return this._城市ID;
			}
			set
			{
				if ((this._城市ID != value))
				{
					if (this._城市表.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On城市IDChanging(value);
					this.SendPropertyChanging();
					this._城市ID = value;
					this.SendPropertyChanged("城市ID");
					this.On城市IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_域名", DbType="VarChar(900) NOT NULL", CanBeNull=false)]
		public string 域名
		{
			get
			{
				return this._域名;
			}
			set
			{
				if ((this._域名 != value))
				{
					this.On域名Changing(value);
					this.SendPropertyChanging();
					this._域名 = value;
					this.SendPropertyChanged("域名");
					this.On域名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_列表页链接", DbType="VarChar(900) NOT NULL", CanBeNull=false)]
		public string 列表页链接
		{
			get
			{
				return this._列表页链接;
			}
			set
			{
				if ((this._列表页链接 != value))
				{
					this.On列表页链接Changing(value);
					this.SendPropertyChanging();
					this._列表页链接 = value;
					this.SendPropertyChanged("列表页链接");
					this.On列表页链接Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_列表页分页参数链接", DbType="VarChar(900) NOT NULL", CanBeNull=false)]
		public string 列表页分页参数链接
		{
			get
			{
				return this._列表页分页参数链接;
			}
			set
			{
				if ((this._列表页分页参数链接 != value))
				{
					this.On列表页分页参数链接Changing(value);
					this.SendPropertyChanging();
					this._列表页分页参数链接 = value;
					this.SendPropertyChanged("列表页分页参数链接");
					this.On列表页分页参数链接Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_详细页面爬取频率", DbType="Int NOT NULL")]
		public int 详细页面爬取频率
		{
			get
			{
				return this._详细页面爬取频率;
			}
			set
			{
				if ((this._详细页面爬取频率 != value))
				{
					this.On详细页面爬取频率Changing(value);
					this.SendPropertyChanging();
					this._详细页面爬取频率 = value;
					this.SendPropertyChanged("详细页面爬取频率");
					this.On详细页面爬取频率Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_列表页面爬取频率", DbType="Int NOT NULL")]
		public int 列表页面爬取频率
		{
			get
			{
				return this._列表页面爬取频率;
			}
			set
			{
				if ((this._列表页面爬取频率 != value))
				{
					this.On列表页面爬取频率Changing(value);
					this.SendPropertyChanging();
					this._列表页面爬取频率 = value;
					this.SendPropertyChanged("列表页面爬取频率");
					this.On列表页面爬取频率Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_规则编号", DbType="Int")]
		public System.Nullable<int> 规则编号
		{
			get
			{
				return this._规则编号;
			}
			set
			{
				if ((this._规则编号 != value))
				{
					this.On规则编号Changing(value);
					this.SendPropertyChanging();
					this._规则编号 = value;
					this.SendPropertyChanged("规则编号");
					this.On规则编号Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_主要用途", DbType="Int")]
		public System.Nullable<int> 主要用途
		{
			get
			{
				return this._主要用途;
			}
			set
			{
				if ((this._主要用途 != value))
				{
					this.On主要用途Changing(value);
					this.SendPropertyChanging();
					this._主要用途 = value;
					this.SendPropertyChanged("主要用途");
					this.On主要用途Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_主要案例类型", DbType="Int")]
		public System.Nullable<int> 主要案例类型
		{
			get
			{
				return this._主要案例类型;
			}
			set
			{
				if ((this._主要案例类型 != value))
				{
					this.On主要案例类型Changing(value);
					this.SendPropertyChanging();
					this._主要案例类型 = value;
					this.SendPropertyChanged("主要案例类型");
					this.On主要案例类型Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="城市表_网站爬取配置", Storage="_城市表", ThisKey="城市ID", OtherKey="ID", IsForeignKey=true)]
		public 城市表 城市表
		{
			get
			{
				return this._城市表.Entity;
			}
			set
			{
				城市表 previousValue = this._城市表.Entity;
				if (((previousValue != value) 
							|| (this._城市表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._城市表.Entity = null;
						previousValue.网站爬取配置.Remove(this);
					}
					this._城市表.Entity = value;
					if ((value != null))
					{
						value.网站爬取配置.Add(this);
						this._城市ID = value.ID;
					}
					else
					{
						this._城市ID = default(int);
					}
					this.SendPropertyChanged("城市表");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="网站表_网站爬取配置", Storage="_网站表", ThisKey="网站ID", OtherKey="ID", IsForeignKey=true)]
		public 网站表 网站表
		{
			get
			{
				return this._网站表.Entity;
			}
			set
			{
				网站表 previousValue = this._网站表.Entity;
				if (((previousValue != value) 
							|| (this._网站表.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._网站表.Entity = null;
						previousValue.网站爬取配置.Remove(this);
					}
					this._网站表.Entity = value;
					if ((value != null))
					{
						value.网站爬取配置.Add(this);
						this._网站ID = value.ID;
					}
					else
					{
						this._网站ID = default(int);
					}
					this.SendPropertyChanged("网站表");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VIEW_网站爬取配置_城市表_网站表")]
	public partial class VIEW_网站爬取配置_城市表_网站表
	{
		
		private long _ID;
		
		private int _网站ID;
		
		private int _城市ID;
		
		private string _域名;
		
		private string _列表页链接;
		
		private string _列表页分页参数链接;
		
		private int _详细页面爬取频率;
		
		private int _列表页面爬取频率;
		
		private System.Nullable<int> _规则编号;
		
		private System.Nullable<int> _主要用途;
		
		private System.Nullable<int> _主要案例类型;
		
		private string _城市名称;
		
		private string _网站名称;
		
		public VIEW_网站爬取配置_城市表_网站表()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站ID", DbType="Int NOT NULL")]
		public int 网站ID
		{
			get
			{
				return this._网站ID;
			}
			set
			{
				if ((this._网站ID != value))
				{
					this._网站ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市ID", DbType="Int NOT NULL")]
		public int 城市ID
		{
			get
			{
				return this._城市ID;
			}
			set
			{
				if ((this._城市ID != value))
				{
					this._城市ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_域名", DbType="VarChar(900) NOT NULL", CanBeNull=false)]
		public string 域名
		{
			get
			{
				return this._域名;
			}
			set
			{
				if ((this._域名 != value))
				{
					this._域名 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_列表页链接", DbType="VarChar(900) NOT NULL", CanBeNull=false)]
		public string 列表页链接
		{
			get
			{
				return this._列表页链接;
			}
			set
			{
				if ((this._列表页链接 != value))
				{
					this._列表页链接 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_列表页分页参数链接", DbType="VarChar(900) NOT NULL", CanBeNull=false)]
		public string 列表页分页参数链接
		{
			get
			{
				return this._列表页分页参数链接;
			}
			set
			{
				if ((this._列表页分页参数链接 != value))
				{
					this._列表页分页参数链接 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_详细页面爬取频率", DbType="Int NOT NULL")]
		public int 详细页面爬取频率
		{
			get
			{
				return this._详细页面爬取频率;
			}
			set
			{
				if ((this._详细页面爬取频率 != value))
				{
					this._详细页面爬取频率 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_列表页面爬取频率", DbType="Int NOT NULL")]
		public int 列表页面爬取频率
		{
			get
			{
				return this._列表页面爬取频率;
			}
			set
			{
				if ((this._列表页面爬取频率 != value))
				{
					this._列表页面爬取频率 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_规则编号", DbType="Int")]
		public System.Nullable<int> 规则编号
		{
			get
			{
				return this._规则编号;
			}
			set
			{
				if ((this._规则编号 != value))
				{
					this._规则编号 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_主要用途", DbType="Int")]
		public System.Nullable<int> 主要用途
		{
			get
			{
				return this._主要用途;
			}
			set
			{
				if ((this._主要用途 != value))
				{
					this._主要用途 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_主要案例类型", DbType="Int")]
		public System.Nullable<int> 主要案例类型
		{
			get
			{
				return this._主要案例类型;
			}
			set
			{
				if ((this._主要案例类型 != value))
				{
					this._主要案例类型 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市名称", DbType="NVarChar(500)")]
		public string 城市名称
		{
			get
			{
				return this._城市名称;
			}
			set
			{
				if ((this._城市名称 != value))
				{
					this._城市名称 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站名称", DbType="NVarChar(500)")]
		public string 网站名称
		{
			get
			{
				return this._网站名称;
			}
			set
			{
				if ((this._网站名称 != value))
				{
					this._网站名称 = value;
				}
			}
		}
	}
	
	public partial class get_案例信息_获取时间段内城市网站的爬取个数Result
	{
		
		private int _城市ID;
		
		private System.Nullable<int> _网站ID;
		
		private System.Nullable<int> _个数;
		
		public get_案例信息_获取时间段内城市网站的爬取个数Result()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市ID", DbType="Int NOT NULL")]
		public int 城市ID
		{
			get
			{
				return this._城市ID;
			}
			set
			{
				if ((this._城市ID != value))
				{
					this._城市ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站ID", DbType="Int")]
		public System.Nullable<int> 网站ID
		{
			get
			{
				return this._网站ID;
			}
			set
			{
				if ((this._网站ID != value))
				{
					this._网站ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_个数", DbType="Int")]
		public System.Nullable<int> 个数
		{
			get
			{
				return this._个数;
			}
			set
			{
				if ((this._个数 != value))
				{
					this._个数 = value;
				}
			}
		}
	}
	
	public partial class get_案例信息_获取时间段内城市网站的未入库的案例个数Result
	{
		
		private int _城市ID;
		
		private System.Nullable<int> _网站ID;
		
		private System.Nullable<int> _个数;
		
		public get_案例信息_获取时间段内城市网站的未入库的案例个数Result()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市ID", DbType="Int NOT NULL")]
		public int 城市ID
		{
			get
			{
				return this._城市ID;
			}
			set
			{
				if ((this._城市ID != value))
				{
					this._城市ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站ID", DbType="Int")]
		public System.Nullable<int> 网站ID
		{
			get
			{
				return this._网站ID;
			}
			set
			{
				if ((this._网站ID != value))
				{
					this._网站ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_个数", DbType="Int")]
		public System.Nullable<int> 个数
		{
			get
			{
				return this._个数;
			}
			set
			{
				if ((this._个数 != value))
				{
					this._个数 = value;
				}
			}
		}
	}
	
	public partial class get_案例信息_获取时间段内城市网站的已入库的案例个数Result
	{
		
		private int _城市ID;
		
		private System.Nullable<int> _网站ID;
		
		private System.Nullable<int> _个数;
		
		public get_案例信息_获取时间段内城市网站的已入库的案例个数Result()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_城市ID", DbType="Int NOT NULL")]
		public int 城市ID
		{
			get
			{
				return this._城市ID;
			}
			set
			{
				if ((this._城市ID != value))
				{
					this._城市ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_网站ID", DbType="Int")]
		public System.Nullable<int> 网站ID
		{
			get
			{
				return this._网站ID;
			}
			set
			{
				if ((this._网站ID != value))
				{
					this._网站ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_个数", DbType="Int")]
		public System.Nullable<int> 个数
		{
			get
			{
				return this._个数;
			}
			set
			{
				if ((this._个数 != value))
				{
					this._个数 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
