//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FxtSpider.FxtApi.Fxt.Api {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Fxt.Api.IFxtAPI")]
    public interface IFxtAPI {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/ResetCrossBy", ReplyAction="http://tempuri.org/IFxtAPI/ResetCrossByResponse")]
        string ResetCrossBy(int projectId, int cityId, int purposeTypeCode, int buildingTypeCode, int buildingAreaType, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/Cross", ReplyAction="http://tempuri.org/IFxtAPI/CrossResponse")]
        string Cross(int projectId, int cityId, int codeType, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProvince", ReplyAction="http://tempuri.org/IFxtAPI/GetProvinceResponse")]
        string GetProvince();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProvinceByName", ReplyAction="http://tempuri.org/IFxtAPI/GetProvinceByNameResponse")]
        string GetProvinceByName(string provinceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProvinceById", ReplyAction="http://tempuri.org/IFxtAPI/GetProvinceByIdResponse")]
        string GetProvinceById(int provinceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCity", ReplyAction="http://tempuri.org/IFxtAPI/GetCityResponse")]
        string GetCity(int provinceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCityByCityName", ReplyAction="http://tempuri.org/IFxtAPI/GetCityByCityNameResponse")]
        string GetCityByCityName(string cityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCityListByCityName", ReplyAction="http://tempuri.org/IFxtAPI/GetCityListByCityNameResponse")]
        string GetCityListByCityName(string cityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetAllCity", ReplyAction="http://tempuri.org/IFxtAPI/GetAllCityResponse")]
        string GetAllCity();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProvinceByCityId", ReplyAction="http://tempuri.org/IFxtAPI/GetProvinceByCityIdResponse")]
        string GetProvinceByCityId(int cityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCityByCityId", ReplyAction="http://tempuri.org/IFxtAPI/GetCityByCityIdResponse")]
        string GetCityByCityId(int cityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetArea", ReplyAction="http://tempuri.org/IFxtAPI/GetAreaResponse")]
        string GetArea(int cityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetAreaByCityName", ReplyAction="http://tempuri.org/IFxtAPI/GetAreaByCityNameResponse")]
        string GetAreaByCityName(string cityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetAreaListByAraeName", ReplyAction="http://tempuri.org/IFxtAPI/GetAreaListByAraeNameResponse")]
        string GetAreaListByAraeName(string areaName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCityByAreaId", ReplyAction="http://tempuri.org/IFxtAPI/GetCityByAreaIdResponse")]
        string GetCityByAreaId(int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetAreaByAreaId", ReplyAction="http://tempuri.org/IFxtAPI/GetAreaByAreaIdResponse")]
        string GetAreaByAreaId(int areaId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProjectByCityNameAndLikePrjName", ReplyAction="http://tempuri.org/IFxtAPI/GetProjectByCityNameAndLikePrjNameResponse")]
        string GetProjectByCityNameAndLikePrjName(string cityName, string projectName, int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProjectByCityIDAndLikePrjName", ReplyAction="http://tempuri.org/IFxtAPI/GetProjectByCityIDAndLikePrjNameResponse")]
        string GetProjectByCityIDAndLikePrjName(int cId, int aId, string pName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProjectJoinPMatchByPNameOrPAddressCityId", ReplyAction="http://tempuri.org/IFxtAPI/GetProjectJoinPMatchByPNameOrPAddressCityIdResponse")]
        string GetProjectJoinPMatchByPNameOrPAddressCityId(string pName, string pAddress, int cId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProjectViewByCityNameAndLikePrjName", ReplyAction="http://tempuri.org/IFxtAPI/GetProjectViewByCityNameAndLikePrjNameResponse")]
        string GetProjectViewByCityNameAndLikePrjName(string cityName, string projectName, int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetBuildingByProjectIdCityIDAndLikeBuildingName", ReplyAction="http://tempuri.org/IFxtAPI/GetBuildingByProjectIdCityIDAndLikeBuildingNameRespons" +
            "e")]
        string GetBuildingByProjectIdCityIDAndLikeBuildingName(int cId, int pId, string bName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetHouseByBuildingIdCityIDAndLikeHouseName", ReplyAction="http://tempuri.org/IFxtAPI/GetHouseByBuildingIdCityIDAndLikeHouseNameResponse")]
        string GetHouseByBuildingIdCityIDAndLikeHouseName(int cId, int bId, string hName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProjectByCityIdAndProjectIds", ReplyAction="http://tempuri.org/IFxtAPI/GetProjectByCityIdAndProjectIdsResponse")]
        string GetProjectByCityIdAndProjectIds(int cityId, string projectIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProjectJoinProjectMatchByProjectNameCityId", ReplyAction="http://tempuri.org/IFxtAPI/GetProjectJoinProjectMatchByProjectNameCityIdResponse")]
        string GetProjectJoinProjectMatchByProjectNameCityId(string projectName, int cityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProjectByProjectNameAndCityName", ReplyAction="http://tempuri.org/IFxtAPI/GetProjectByProjectNameAndCityNameResponse")]
        string GetProjectByProjectNameAndCityName(string projectName, string cityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProjectByCityNameAndPage", ReplyAction="http://tempuri.org/IFxtAPI/GetProjectByCityNameAndPageResponse")]
        string GetProjectByCityNameAndPage(string cityName, int pageIndex, int pageSize, int isGetCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/InsertProject", ReplyAction="http://tempuri.org/IFxtAPI/InsertProjectResponse")]
        string InsertProject(string projectName, int cityId, int areaId, int purposeCode, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/InsertSYSProjectMatch", ReplyAction="http://tempuri.org/IFxtAPI/InsertSYSProjectMatchResponse")]
        string InsertSYSProjectMatch(string netName, string projectName, int projectId, int cityId, string ip, string validate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/InsertSYSProjectMatchList", ReplyAction="http://tempuri.org/IFxtAPI/InsertSYSProjectMatchListResponse")]
        string InsertSYSProjectMatchList(string jsonData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetHouseByHouse_City_Building", ReplyAction="http://tempuri.org/IFxtAPI/GetHouseByHouse_City_BuildingResponse")]
        string GetHouseByHouse_City_Building(string houseName, int cId, int bId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetBuildingByProject_City_Build", ReplyAction="http://tempuri.org/IFxtAPI/GetBuildingByProject_City_BuildResponse")]
        string GetBuildingByProject_City_Build(int pId, int cId, string bName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCaseByCityIdAndCaseIds", ReplyAction="http://tempuri.org/IFxtAPI/GetCaseByCityIdAndCaseIdsResponse")]
        string GetCaseByCityIdAndCaseIds(int cityId, string caseIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCaseByCityIdAndCaseId", ReplyAction="http://tempuri.org/IFxtAPI/GetCaseByCityIdAndCaseIdResponse")]
        string GetCaseByCityIdAndCaseId(int cityId, int caseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCaseIdJoinProjectNameByCityIdAndCaseIds", ReplyAction="http://tempuri.org/IFxtAPI/GetCaseIdJoinProjectNameByCityIdAndCaseIdsResponse")]
        string GetCaseIdJoinProjectNameByCityIdAndCaseIds(int cityId, string caseIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCaseByCityIdAndProjectIdAndPurposeCodeAndBuildingTy" +
            "peCodeAndAreaTypeAndDateAndPage", ReplyAction="http://tempuri.org/IFxtAPI/GetCaseByCityIdAndProjectIdAndPurposeCodeAndBuildingTy" +
            "peCodeAndAreaTypeAndDateAndPageResponse")]
        string GetCaseByCityIdAndProjectIdAndPurposeCodeAndBuildingTypeCodeAndAreaTypeAndDateAndPage(int cityId, int projectId, int fxtCompanyId, System.Nullable<int> buildingTypeCode, int purposeCode, System.Nullable<int> buildingAreaCode, string startDate, string endDate, int pageIndex, int pageSize, int isGetCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCaseCountJoinProjectJoinPurposeTypeByCityIdAndProje" +
            "ctIdAndDates", ReplyAction="http://tempuri.org/IFxtAPI/GetCaseCountJoinProjectJoinPurposeTypeByCityIdAndProje" +
            "ctIdAndDatesResponse")]
        string GetCaseCountJoinProjectJoinPurposeTypeByCityIdAndProjectIdAndDates(int cityId, int projectId, string dates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCaseCountJoinProjectJoinBuildingTypeJoinAreaTypeByP" +
            "ublicPurposeAndCityIdAndProjectIdAndDate", ReplyAction="http://tempuri.org/IFxtAPI/GetCaseCountJoinProjectJoinBuildingTypeJoinAreaTypeByP" +
            "ublicPurposeAndCityIdAndProjectIdAndDateResponse")]
        string GetCaseCountJoinProjectJoinBuildingTypeJoinAreaTypeByPublicPurposeAndCityIdAndProjectIdAndDate(int cityId, int projectId, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetCaseCountJoinProjectJoinPurposeTypeByVillaPurposeAn" +
            "dCityIdAndProjectIdAndDate", ReplyAction="http://tempuri.org/IFxtAPI/GetCaseCountJoinProjectJoinPurposeTypeByVillaPurposeAn" +
            "dCityIdAndProjectIdAndDateResponse")]
        string GetCaseCountJoinProjectJoinPurposeTypeByVillaPurposeAndCityIdAndProjectIdAndDate(int cityId, int projectId, string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/DeleteCaseByCityNameAndCaseIds", ReplyAction="http://tempuri.org/IFxtAPI/DeleteCaseByCityNameAndCaseIdsResponse")]
        string DeleteCaseByCityNameAndCaseIds(string cityName, string caseIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/DeleteCaseByCityIdAndCaseIds", ReplyAction="http://tempuri.org/IFxtAPI/DeleteCaseByCityIdAndCaseIdsResponse")]
        string DeleteCaseByCityIdAndCaseIds(int cityId, string caseIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/InsertCase", ReplyAction="http://tempuri.org/IFxtAPI/InsertCaseResponse")]
        string InsertCase(
                    int cityId, 
                    int projectId, 
                    System.Nullable<int> buildingId, 
                    string houseNo, 
                    System.DateTime caseDate, 
                    System.Nullable<int> purposeCode, 
                    System.Nullable<decimal> buildingArea, 
                    System.Nullable<decimal> unitPrice, 
                    System.Nullable<decimal> totalPrice, 
                    System.Nullable<int> caseTypeCode, 
                    System.Nullable<int> structureCode, 
                    System.Nullable<int> buildingTypeCode, 
                    System.Nullable<int> floorNumber, 
                    System.Nullable<int> totalFloor, 
                    System.Nullable<int> houseTypeCode, 
                    System.Nullable<int> frontCode, 
                    System.Nullable<int> moneyUnitCode, 
                    string remark, 
                    System.Nullable<int> areaId, 
                    string buildingDate, 
                    System.Nullable<int> fitmentCode, 
                    string subHouse, 
                    string peiTao, 
                    string createUser, 
                    string sourceName, 
                    string sourceLink, 
                    string sourcePhone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/UpdateCase", ReplyAction="http://tempuri.org/IFxtAPI/UpdateCaseResponse")]
        string UpdateCase(int cityId, string caseJson);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetAllProjectPurposeCode", ReplyAction="http://tempuri.org/IFxtAPI/GetAllProjectPurposeCodeResponse")]
        string GetAllProjectPurposeCode();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetSYSCodeByID", ReplyAction="http://tempuri.org/IFxtAPI/GetSYSCodeByIDResponse")]
        string GetSYSCodeByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetPurposeTypeCodeVillaType", ReplyAction="http://tempuri.org/IFxtAPI/GetPurposeTypeCodeVillaTypeResponse")]
        string GetPurposeTypeCodeVillaType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetSYSCodeByCode", ReplyAction="http://tempuri.org/IFxtAPI/GetSYSCodeByCodeResponse")]
        string GetSYSCodeByCode(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProjectAvgPriceByProjectIdsAndCityIdAndDateRangeAnd" +
            "AvgPriceDates", ReplyAction="http://tempuri.org/IFxtAPI/GetProjectAvgPriceByProjectIdsAndCityIdAndDateRangeAnd" +
            "AvgPriceDatesResponse")]
        string GetProjectAvgPriceByProjectIdsAndCityIdAndDateRangeAndAvgPriceDates(string projectIds, int cityId, int dateRange, string avgPriceDates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/GetProjectAvgPriceByProjectIdAndCityIdAndBy", ReplyAction="http://tempuri.org/IFxtAPI/GetProjectAvgPriceByProjectIdAndCityIdAndByResponse")]
        string GetProjectAvgPriceByProjectIdAndCityIdAndBy(int projectId, int cityId, int purposeCode, System.Nullable<int> buildingTypeCode, System.Nullable<int> buildingAreaCode, string date, int dateRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFxtAPI/Entrance", ReplyAction="http://tempuri.org/IFxtAPI/EntranceResponse")]
        object Entrance(string date, string code, string type, string name, string value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFxtAPIChannel : FxtSpider.FxtApi.Fxt.Api.IFxtAPI, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FxtAPIClient : System.ServiceModel.ClientBase<FxtSpider.FxtApi.Fxt.Api.IFxtAPI>, FxtSpider.FxtApi.Fxt.Api.IFxtAPI {
        
        public FxtAPIClient() {
        }
        
        public FxtAPIClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FxtAPIClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FxtAPIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FxtAPIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string ResetCrossBy(int projectId, int cityId, int purposeTypeCode, int buildingTypeCode, int buildingAreaType, string date) {
            return base.Channel.ResetCrossBy(projectId, cityId, purposeTypeCode, buildingTypeCode, buildingAreaType, date);
        }
        
        public string Cross(int projectId, int cityId, int codeType, string date) {
            return base.Channel.Cross(projectId, cityId, codeType, date);
        }
        
        public string GetProvince() {
            return base.Channel.GetProvince();
        }
        
        public string GetProvinceByName(string provinceName) {
            return base.Channel.GetProvinceByName(provinceName);
        }
        
        public string GetProvinceById(int provinceId) {
            return base.Channel.GetProvinceById(provinceId);
        }
        
        public string GetCity(int provinceId) {
            return base.Channel.GetCity(provinceId);
        }
        
        public string GetCityByCityName(string cityName) {
            return base.Channel.GetCityByCityName(cityName);
        }
        
        public string GetCityListByCityName(string cityName) {
            return base.Channel.GetCityListByCityName(cityName);
        }
        
        public string GetAllCity() {
            return base.Channel.GetAllCity();
        }
        
        public string GetProvinceByCityId(int cityId) {
            return base.Channel.GetProvinceByCityId(cityId);
        }
        
        public string GetCityByCityId(int cityId) {
            return base.Channel.GetCityByCityId(cityId);
        }
        
        public string GetArea(int cityId) {
            return base.Channel.GetArea(cityId);
        }
        
        public string GetAreaByCityName(string cityName) {
            return base.Channel.GetAreaByCityName(cityName);
        }
        
        public string GetAreaListByAraeName(string areaName) {
            return base.Channel.GetAreaListByAraeName(areaName);
        }
        
        public string GetCityByAreaId(int areaId) {
            return base.Channel.GetCityByAreaId(areaId);
        }
        
        public string GetAreaByAreaId(int areaId) {
            return base.Channel.GetAreaByAreaId(areaId);
        }
        
        public string GetProjectByCityNameAndLikePrjName(string cityName, string projectName, int length) {
            return base.Channel.GetProjectByCityNameAndLikePrjName(cityName, projectName, length);
        }
        
        public string GetProjectByCityIDAndLikePrjName(int cId, int aId, string pName) {
            return base.Channel.GetProjectByCityIDAndLikePrjName(cId, aId, pName);
        }
        
        public string GetProjectJoinPMatchByPNameOrPAddressCityId(string pName, string pAddress, int cId) {
            return base.Channel.GetProjectJoinPMatchByPNameOrPAddressCityId(pName, pAddress, cId);
        }
        
        public string GetProjectViewByCityNameAndLikePrjName(string cityName, string projectName, int length) {
            return base.Channel.GetProjectViewByCityNameAndLikePrjName(cityName, projectName, length);
        }
        
        public string GetBuildingByProjectIdCityIDAndLikeBuildingName(int cId, int pId, string bName) {
            return base.Channel.GetBuildingByProjectIdCityIDAndLikeBuildingName(cId, pId, bName);
        }
        
        public string GetHouseByBuildingIdCityIDAndLikeHouseName(int cId, int bId, string hName) {
            return base.Channel.GetHouseByBuildingIdCityIDAndLikeHouseName(cId, bId, hName);
        }
        
        public string GetProjectByCityIdAndProjectIds(int cityId, string projectIds) {
            return base.Channel.GetProjectByCityIdAndProjectIds(cityId, projectIds);
        }
        
        public string GetProjectJoinProjectMatchByProjectNameCityId(string projectName, int cityId) {
            return base.Channel.GetProjectJoinProjectMatchByProjectNameCityId(projectName, cityId);
        }
        
        public string GetProjectByProjectNameAndCityName(string projectName, string cityName) {
            return base.Channel.GetProjectByProjectNameAndCityName(projectName, cityName);
        }
        
        public string GetProjectByCityNameAndPage(string cityName, int pageIndex, int pageSize, int isGetCount) {
            return base.Channel.GetProjectByCityNameAndPage(cityName, pageIndex, pageSize, isGetCount);
        }
        
        public string InsertProject(string projectName, int cityId, int areaId, int purposeCode, string address) {
            return base.Channel.InsertProject(projectName, cityId, areaId, purposeCode, address);
        }
        
        public string InsertSYSProjectMatch(string netName, string projectName, int projectId, int cityId, string ip, string validate) {
            return base.Channel.InsertSYSProjectMatch(netName, projectName, projectId, cityId, ip, validate);
        }
        
        public string InsertSYSProjectMatchList(string jsonData) {
            return base.Channel.InsertSYSProjectMatchList(jsonData);
        }
        
        public string GetHouseByHouse_City_Building(string houseName, int cId, int bId) {
            return base.Channel.GetHouseByHouse_City_Building(houseName, cId, bId);
        }
        
        public string GetBuildingByProject_City_Build(int pId, int cId, string bName) {
            return base.Channel.GetBuildingByProject_City_Build(pId, cId, bName);
        }
        
        public string GetCaseByCityIdAndCaseIds(int cityId, string caseIds) {
            return base.Channel.GetCaseByCityIdAndCaseIds(cityId, caseIds);
        }
        
        public string GetCaseByCityIdAndCaseId(int cityId, int caseId) {
            return base.Channel.GetCaseByCityIdAndCaseId(cityId, caseId);
        }
        
        public string GetCaseIdJoinProjectNameByCityIdAndCaseIds(int cityId, string caseIds) {
            return base.Channel.GetCaseIdJoinProjectNameByCityIdAndCaseIds(cityId, caseIds);
        }
        
        public string GetCaseByCityIdAndProjectIdAndPurposeCodeAndBuildingTypeCodeAndAreaTypeAndDateAndPage(int cityId, int projectId, int fxtCompanyId, System.Nullable<int> buildingTypeCode, int purposeCode, System.Nullable<int> buildingAreaCode, string startDate, string endDate, int pageIndex, int pageSize, int isGetCount) {
            return base.Channel.GetCaseByCityIdAndProjectIdAndPurposeCodeAndBuildingTypeCodeAndAreaTypeAndDateAndPage(cityId, projectId, fxtCompanyId, buildingTypeCode, purposeCode, buildingAreaCode, startDate, endDate, pageIndex, pageSize, isGetCount);
        }
        
        public string GetCaseCountJoinProjectJoinPurposeTypeByCityIdAndProjectIdAndDates(int cityId, int projectId, string dates) {
            return base.Channel.GetCaseCountJoinProjectJoinPurposeTypeByCityIdAndProjectIdAndDates(cityId, projectId, dates);
        }
        
        public string GetCaseCountJoinProjectJoinBuildingTypeJoinAreaTypeByPublicPurposeAndCityIdAndProjectIdAndDate(int cityId, int projectId, string date) {
            return base.Channel.GetCaseCountJoinProjectJoinBuildingTypeJoinAreaTypeByPublicPurposeAndCityIdAndProjectIdAndDate(cityId, projectId, date);
        }
        
        public string GetCaseCountJoinProjectJoinPurposeTypeByVillaPurposeAndCityIdAndProjectIdAndDate(int cityId, int projectId, string date) {
            return base.Channel.GetCaseCountJoinProjectJoinPurposeTypeByVillaPurposeAndCityIdAndProjectIdAndDate(cityId, projectId, date);
        }
        
        public string DeleteCaseByCityNameAndCaseIds(string cityName, string caseIds) {
            return base.Channel.DeleteCaseByCityNameAndCaseIds(cityName, caseIds);
        }
        
        public string DeleteCaseByCityIdAndCaseIds(int cityId, string caseIds) {
            return base.Channel.DeleteCaseByCityIdAndCaseIds(cityId, caseIds);
        }
        
        public string InsertCase(
                    int cityId, 
                    int projectId, 
                    System.Nullable<int> buildingId, 
                    string houseNo, 
                    System.DateTime caseDate, 
                    System.Nullable<int> purposeCode, 
                    System.Nullable<decimal> buildingArea, 
                    System.Nullable<decimal> unitPrice, 
                    System.Nullable<decimal> totalPrice, 
                    System.Nullable<int> caseTypeCode, 
                    System.Nullable<int> structureCode, 
                    System.Nullable<int> buildingTypeCode, 
                    System.Nullable<int> floorNumber, 
                    System.Nullable<int> totalFloor, 
                    System.Nullable<int> houseTypeCode, 
                    System.Nullable<int> frontCode, 
                    System.Nullable<int> moneyUnitCode, 
                    string remark, 
                    System.Nullable<int> areaId, 
                    string buildingDate, 
                    System.Nullable<int> fitmentCode, 
                    string subHouse, 
                    string peiTao, 
                    string createUser, 
                    string sourceName, 
                    string sourceLink, 
                    string sourcePhone) {
            return base.Channel.InsertCase(cityId, projectId, buildingId, houseNo, caseDate, purposeCode, buildingArea, unitPrice, totalPrice, caseTypeCode, structureCode, buildingTypeCode, floorNumber, totalFloor, houseTypeCode, frontCode, moneyUnitCode, remark, areaId, buildingDate, fitmentCode, subHouse, peiTao, createUser, sourceName, sourceLink, sourcePhone);
        }
        
        public string UpdateCase(int cityId, string caseJson) {
            return base.Channel.UpdateCase(cityId, caseJson);
        }
        
        public string GetAllProjectPurposeCode() {
            return base.Channel.GetAllProjectPurposeCode();
        }
        
        public string GetSYSCodeByID(int id) {
            return base.Channel.GetSYSCodeByID(id);
        }
        
        public string GetPurposeTypeCodeVillaType() {
            return base.Channel.GetPurposeTypeCodeVillaType();
        }
        
        public string GetSYSCodeByCode(int code) {
            return base.Channel.GetSYSCodeByCode(code);
        }
        
        public string GetProjectAvgPriceByProjectIdsAndCityIdAndDateRangeAndAvgPriceDates(string projectIds, int cityId, int dateRange, string avgPriceDates) {
            return base.Channel.GetProjectAvgPriceByProjectIdsAndCityIdAndDateRangeAndAvgPriceDates(projectIds, cityId, dateRange, avgPriceDates);
        }
        
        public string GetProjectAvgPriceByProjectIdAndCityIdAndBy(int projectId, int cityId, int purposeCode, System.Nullable<int> buildingTypeCode, System.Nullable<int> buildingAreaCode, string date, int dateRange) {
            return base.Channel.GetProjectAvgPriceByProjectIdAndCityIdAndBy(projectId, cityId, purposeCode, buildingTypeCode, buildingAreaCode, date, dateRange);
        }
        
        public object Entrance(string date, string code, string type, string name, string value) {
            return base.Channel.Entrance(date, code, type, name, value);
        }
    }
}
